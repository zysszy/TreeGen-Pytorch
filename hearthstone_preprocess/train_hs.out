class AcidicSwampOoze(MinionCard):§    def __init__(self):§        super().__init__("Acidic Swamp Ooze", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Destroy(), WeaponSelector(EnemyPlayer())))§§    def create_minion(self, player):§        return Minion(3, 2)§
class AncestralHealing(SpellCard):§    def __init__(self):§        super().__init__("Ancestral Healing", 0, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)§§    def use(self, player, game):§        super().use(player, game)§§        self.target.heal(player.effective_heal_power(self.target.calculate_max_health()), self)§        self.target.taunt = True§
class AnimalCompanion(SpellCard):§    def __init__(self):§        super().__init__("Animal Companion", 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON)§§    def use(self, player, game):§        super().use(player, game)§§        beast_list = [hearthbreaker.cards.minions.hunter.Huffer(), hearthbreaker.cards.minions.hunter.Misha(), hearthbreaker.cards.minions.hunter.Leokk()]§        card = game.random_choice(beast_list)§        card.summon(player, player.game, len(player.minions))§§    def can_use(self, player, game):§        return super().can_use(player, game) and len(player.minions) < 7§
class ArcaneExplosion(SpellCard):§    def __init__(self):§        super().__init__("Arcane Explosion", 2, CHARACTER_CLASS.MAGE, CARD_RARITY.FREE)§§    def use(self, player, game):§        super().use(player, game)§        for minion in copy.copy(game.other_player.minions):§            minion.damage(player.effective_spell_damage(1), self)§
class ArcaneIntellect(SpellCard):§    def __init__(self):§        super().__init__("Arcane Intellect", 3, CHARACTER_CLASS.MAGE, CARD_RARITY.FREE)§§    def use(self, player, game):§        super().use(player, game)§        for c in range(0, 2):§            player.draw()§
class ArcaneMissiles(SpellCard):§    def __init__(self):§        super().__init__("Arcane Missiles", 1, CHARACTER_CLASS.MAGE, CARD_RARITY.FREE)§§    def use(self, player, game):§        super().use(player, game)§        for i in range(0, player.effective_spell_damage(3)):§            targets = copy.copy(game.other_player.minions)§            targets.append(game.other_player.hero)§            target = game.random_choice(targets)§            target.damage(1, self)§
class ArcaneShot(SpellCard):§    def __init__(self):§        super().__init__("Arcane Shot", 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_spell_target)§§    def use(self, player, game):§        super().use(player, game)§        self.target.damage(player.effective_spell_damage(2), self)§
class ArcaniteReaper(WeaponCard):§    def __init__(self):§        super().__init__("Arcanite Reaper", 5, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON)§§    def create_weapon(self, player):§        return Weapon(5, 2)§
class Assassinate(SpellCard):§    def __init__(self):§        super().__init__("Assassinate", 5, CHARACTER_CLASS.ROGUE, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_enemy_minion_spell_target)§§    def use(self, player, game):§        super().use(player, game)§§        self.target.die(self)§
class Backstab(SpellCard):§    def __init__(self):§        super().__init__("Backstab", 0, CHARACTER_CLASS.ROGUE, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_minion_spell_target, filter_func=lambda target: target.health == target.calculate_max_health() and target.spell_targetable())§§    def use(self, player, game):§        super().use(player, game)§§        self.target.damage(player.effective_spell_damage(2), self)§
class BlessingOfKings(SpellCard):§    def __init__(self):§        super().__init__("Blessing of Kings", 4, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)§§    def use(self, player, game):§        super().use(player, game)§        self.target.change_attack(4)§        self.target.increase_health(4)§
class BlessingOfMight(SpellCard):§    def __init__(self):§        super().__init__("Blessing of Might", 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)§§    def use(self, player, game):§        super().use(player, game)§        self.target.change_attack(3)§
class BloodfenRaptor(MinionCard):§    def __init__(self):§        super().__init__("Bloodfen Raptor", 2, CHARACTER_CLASS.ALL, CARD_RARITY.FREE, minion_type=MINION_TYPE.BEAST)§§    def create_minion(self, player):§        return Minion(3, 2)§
class Bloodlust(SpellCard):§    def __init__(self):§        super().__init__("Bloodlust", 5, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON)§§    def use(self, player, game):§        super().use(player, game)§§        for minion in player.minions:§            minion.change_temp_attack(3)§
class BluegillWarrior(MinionCard):§    def __init__(self):§        super().__init__("Bluegill Warrior", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MURLOC)§§    def create_minion(self, player):§        return Minion(2, 1, charge=True)§
class Boar(MinionCard):§    def __init__(self):§        super().__init__("Boar", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.BEAST)§§    def create_minion(self, player):§        return Minion(1, 1)§
class Charge(SpellCard):§    def __init__(self):§        super().__init__("Charge", 3, CHARACTER_CLASS.WARRIOR, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_friendly_minion_spell_target)§§    def use(self, player, game):§        super().use(player, game)§§        self.target.change_attack(2)§        self.target.add_buff(Buff(_Charge()))§
class ChillwindYeti(MinionCard):§    def __init__(self):§        super().__init__("Chillwind Yeti", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)§§    def create_minion(self, player):§        return Minion(4, 5)§
class Claw(SpellCard):§    def __init__(self):§        super().__init__("Claw", 1, CHARACTER_CLASS.DRUID, CARD_RARITY.FREE)§§    def use(self, player, game):§        super().use(player, game)§        player.hero.change_temp_attack(2)§        player.hero.increase_armor(2)§
class Cleave(SpellCard):§    def __init__(self):§        super().__init__("Cleave", 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON)§§    def use(self, player, game):§        super().use(player, game)§§        minions = copy.copy(game.other_player.minions)§§        for i in range(0, 2):§            minion = game.random_choice(minions)§            minions.remove(minion)§            minion.damage(player.effective_spell_damage(2), self)§§    def can_use(self, player, game):§        return super().can_use(player, game) and len(game.other_player.minions) >= 2§
class Consecration(SpellCard):§    def __init__(self):§        super().__init__("Consecration", 4, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON)§§    def use(self, player, game):§        super().use(player, game)§        for minion in copy.copy(game.other_player.minions):§            minion.damage(player.effective_spell_damage(2), self)§        game.other_player.hero.damage(player.effective_spell_damage(2), self)§
class CoreHound(MinionCard):§    def __init__(self):§        super().__init__("Core Hound", 7, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)§§    def create_minion(self, player):§        return Minion(9, 5)§
class Corruption(SpellCard):§    def __init__(self):§        super().__init__("Corruption", 1, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_enemy_minion_spell_target)§§    def use(self, player, game):§        super().use(player, game)§        self.target.add_effect(Effect(TurnStarted(player=EnemyPlayer()), ActionTag(Kill(), SelfSelector())))§
class DalaranMage(MinionCard):§    def __init__(self):§        super().__init__("Dalaran Mage", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)§§    def create_minion(self, player):§        return Minion(1, 4, spell_damage=1)§
class DivineSpirit(SpellCard):§    def __init__(self):§        super().__init__("Divine Spirit", 2, CHARACTER_CLASS.PRIEST, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)§§    def use(self, player, game):§        super().use(player, game)§§        self.target.increase_health(self.target.health)§
class DragonlingMechanic(MinionCard):§    def __init__(self):§        super().__init__("Dragonling Mechanic", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Summon(MechanicalDragonling()), PlayerSelector()))§§    def create_minion(self, player):§        return Minion(2, 4)§
class DrainLife(SpellCard):§    def __init__(self):§        super().__init__("Drain Life", 3, CHARACTER_CLASS.WARLOCK, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_spell_target)§§    def use(self, player, game):§        super().use(player, game)§        self.target.damage(player.effective_spell_damage(2), self)§        player.hero.heal(player.effective_heal_power(2), self)§
class DreadInfernal(MinionCard):§    def __init__(self):§        super().__init__("Dread Infernal", 6, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, minion_type=MINION_TYPE.DEMON, battlecry=Battlecry(Damage(1), CharacterSelector(players=BothPlayer())))§§    def create_minion(self, player):§        return Minion(6, 6)§
class ElvenArcher(MinionCard):§    def __init__(self):§        super().__init__("Elven Archer", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Damage(1), CharacterSelector(players=BothPlayer(), picker=UserPicker())))§§    def create_minion(self, player):§        return Minion(1, 1)§
class ExcessMana(SpellCard):§    def __init__(self):§        super().__init__("Excess Mana", 0, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, False)§§    def use(self, player, game):§        super().use(player, game)§        player.draw()§
class Execute(SpellCard):§    def __init__(self):§        super().__init__("Execute", 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_enemy_minion_spell_target, filter_func=lambda target: target.health != target.calculate_max_health() and target.spell_targetable())§§    def use(self, player, game):§        super().use(player, game)§§        self.target.die(self)§
class FanOfKnives(SpellCard):§    def __init__(self):§        super().__init__("Fan of Knives", 3, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON)§§    def use(self, player, game):§        super().use(player, game)§§        for minion in copy.copy(game.other_player.minions):§            minion.damage(player.effective_spell_damage(1), self)§§        player.draw()§
class Fireball(SpellCard):§    def __init__(self):§        super().__init__("Fireball", 4, CHARACTER_CLASS.MAGE, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_spell_target)§§    def use(self, player, game):§        super().use(player, game)§        self.target.damage(player.effective_spell_damage(6), self)§
class Flamestrike(SpellCard):§    def __init__(self):§        super().__init__("Flamestrike", 7, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON)§§    def use(self, player, game):§        super().use(player, game)§        for minion in copy.copy(game.other_player.minions):§            minion.damage(player.effective_spell_damage(4), self)§
class FlametongueTotem(MinionCard):§    def __init__(self):§        super().__init__("Flametongue Totem", 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON, minion_type=MINION_TYPE.TOTEM)§§    def create_minion(self, player):§        return Minion(0, 3, auras=[Aura(ChangeAttack(2), MinionSelector(Adjacent()))])§
class Frog(MinionCard):§    def __init__(self):§        super().__init__("Frog", 0, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.BEAST)§§    def create_minion(self, p):§        return Minion(0, 1, taunt=True)§
class FrostNova(SpellCard):§    def __init__(self):§        super().__init__("Frost Nova", 3, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON)§§    def use(self, player, game):§        super().use(player, game)§        for minion in game.other_player.minions:§            minion.add_buff(Buff(Frozen()))§
class FrostShock(SpellCard):§    def __init__(self):§        super().__init__("Frost Shock", 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_enemy_spell_target)§§    def use(self, player, game):§        super().use(player, game)§§        self.target.damage(player.effective_spell_damage(1), self)§        self.target.add_buff(Buff(Frozen()))§
class Frostbolt(SpellCard):§    def __init__(self):§        super().__init__("Frostbolt", 2, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_spell_target)§§    def use(self, player, game):§        super().use(player, game)§        self.target.damage(player.effective_spell_damage(3), self)§        self.target.add_buff(Buff(Frozen()))§
class FrostwolfGrunt(MinionCard):§    def __init__(self):§        super().__init__("Frostwolf Grunt", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)§§    def create_minion(self, player):§        return Minion(2, 2, taunt=True)§
class GoldshireFootman(MinionCard):§    def __init__(self):§        super().__init__("Goldshire Footman", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)§§    def create_minion(self, player):§        return Minion(1, 2, taunt=True)§
class GrimscaleOracle(MinionCard):§    def __init__(self):§        super().__init__("Grimscale Oracle", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MURLOC)§§    def create_minion(self, player):§        return Minion(1, 1, auras=[Aura(ChangeAttack(1), MinionSelector(IsType(MINION_TYPE.MURLOC), BothPlayer()))])§
class GuardianOfKings(MinionCard):§    def __init__(self):§        super().__init__("Guardian of Kings", 7, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON, battlecry=Battlecry(Heal(6), HeroSelector()))§§    def create_minion(self, player):§        return Minion(5, 6)§
class GurubashiBerserker(MinionCard):§    def __init__(self):§        super().__init__("Gurubashi Berserker", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)§§    def create_minion(self, player):§        return Minion(2, 7, effects=[§            Effect(CharacterDamaged(condition=MinionIsTarget()), ActionTag(Give(ChangeAttack(3)), SelfSelector()))])§
class HammerOfWrath(SpellCard):§    def __init__(self):§        super().__init__("Hammer of Wrath", 4, CHARACTER_CLASS.PALADIN, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_spell_target)§§    def use(self, player, game):§        super().use(player, game)§§        self.target.damage(player.effective_spell_damage(3), self)§        player.draw()§
class HandOfProtection(SpellCard):§    def __init__(self):§        super().__init__("Hand of Protection", 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)§§    def use(self, player, game):§        super().use(player, game)§§        self.target.divine_shield = True§
class HealingTotem(MinionCard):§    def __init__(self):§        super().__init__("Healing Totem", 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE, False, MINION_TYPE.TOTEM)§§    def create_minion(self, player):§        return Minion(0, 2, effects=[Effect(TurnEnded(), ActionTag(Heal(1), MinionSelector(condition=None)))])§
class HealingTouch(SpellCard):§    def __init__(self):§        super().__init__("Healing Touch", 3, CHARACTER_CLASS.DRUID, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_spell_target)§§    def use(self, player, game):§        super().use(player, game)§        self.target.heal(player.effective_heal_power(8), self)§
class Hex(SpellCard):§    def __init__(self):§        super().__init__("Hex", 3, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)§§    def use(self, player, game):§        super().use(player, game)§§        frog = hearthbreaker.cards.minions.neutral.Frog()§        minion = frog.create_minion(None)§        minion.card = frog§        self.target.replace(minion)§
class HolyLight(SpellCard):§    def __init__(self):§        super().__init__("Holy Light", 2, CHARACTER_CLASS.PALADIN, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_spell_target)§§    def use(self, player, game):§        super().use(player, game)§§        self.target.heal(player.effective_heal_power(6), self)§
class HolyNova(SpellCard):§    def __init__(self):§        super().__init__("Holy Nova", 5, CHARACTER_CLASS.PRIEST, CARD_RARITY.COMMON)§§    def use(self, player, game):§        super().use(player, game)§§        for minion in copy.copy(game.other_player.minions):§            minion.damage(player.effective_spell_damage(2), self)§§        for minion in player.minions:§            minion.heal(player.effective_heal_power(2), self)§
class HolySmite(SpellCard):§    def __init__(self):§        super().__init__("Holy Smite", 1, CHARACTER_CLASS.PRIEST, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_spell_target)§§    def use(self, player, game):§        super().use(player, game)§§        self.target.damage(player.effective_spell_damage(2), self)§
class Houndmaster(MinionCard):§    def __init__(self):§        super().__init__("Houndmaster", 4, CHARACTER_CLASS.HUNTER, CARD_RARITY.FREE, minion_type=MINION_TYPE.NONE, battlecry=Battlecry(Give([Buff(ChangeHealth(2)), Buff(ChangeAttack(2)), Buff(Taunt())]), MinionSelector(IsType(MINION_TYPE.BEAST), picker=UserPicker())))§§    def create_minion(self, player):§        return Minion(4, 3)§
class Huffer(MinionCard):§    def __init__(self):§        super().__init__("Huffer", 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.BEAST)§§    def create_minion(self, player):§        return Minion(4, 2, charge=True)§
class Humility(SpellCard):§    def __init__(self):§        super().__init__("Humility", 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)§§    def use(self, player, game):§        super().use(player, game)§§        self.target.change_attack(1 - self.target.calculate_attack())§
class HuntersMark(SpellCard):§    def __init__(self):§        super().__init__("Hunter's Mark", 0, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)§§    def use(self, player, game):§        super().use(player, game)§        self.target.set_health_to(1)§
class IronforgeRifleman(MinionCard):§    def __init__(self):§        super().__init__("Ironforge Rifleman", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.NONE, battlecry=Battlecry(Damage(1), CharacterSelector(players=BothPlayer(), picker=UserPicker())))§§    def create_minion(self, player):§        return Minion(2, 2)§
class IronfurGrizzly(MinionCard):§    def __init__(self):§        super().__init__("Ironfur Grizzly", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)§§    def create_minion(self, player):§        return Minion(3, 3, taunt=True)§
class KillCommand(SpellCard):§    def __init__(self):§        super().__init__("Kill Command", 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_spell_target)§§    def use(self, player, game):§        super().use(player, game)§        beasts = hearthbreaker.targeting.find_friendly_minion_battlecry_target(§            player.game, lambda x: x.card.minion_type is MINION_TYPE.BEAST)§        if beasts is None:§            self.target.damage(player.effective_spell_damage(3), self)§        else:§            self.target.damage(player.effective_spell_damage(5), self)§
class KoboldGeomancer(MinionCard):§    def __init__(self):§        super().__init__("Kobold Geomancer", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)§§    def create_minion(self, player):§        return Minion(2, 2, spell_damage=1)§
class KorkronElite(MinionCard):§    def __init__(self):§        super().__init__("Kor'kron Elite", 4, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON)§§    def create_minion(self, player):§        return Minion(4, 3, charge=True)§
class Leokk(MinionCard):§    def __init__(self):§        super().__init__("Leokk", 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.BEAST)§§    def create_minion(self, player):§        return Minion(2, 4, auras=[Aura(ChangeAttack(1), MinionSelector())])§
class LightsJustice(WeaponCard):§    def __init__(self):§        super().__init__("Light's Justice", 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.FREE)§§    def create_weapon(self, player):§        return Weapon(1, 4)§
class LordOfTheArena(MinionCard):§    def __init__(self):§        super().__init__("Lord of the Arena", 6, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)§§    def create_minion(self, player):§        return Minion(6, 5, taunt=True)§
class MechanicalDragonling(MinionCard):§    def __init__(self):§        super().__init__("Mechanical Dragonling", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.MECH)§§    def create_minion(self, player):§        return Minion(2, 1)§
class MindBlast(SpellCard):§    def __init__(self):§        super().__init__("Mind Blast", 2, CHARACTER_CLASS.PRIEST, CARD_RARITY.FREE)§§    def use(self, player, game):§        super().use(player, game)§§        game.other_player.hero.damage(player.effective_spell_damage(5), self)§
class MindControl(SpellCard):§    def __init__(self):§        super().__init__("Mind Control", 10, CHARACTER_CLASS.PRIEST, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_enemy_minion_spell_target)§§    def use(self, player, game):§        super().use(player, game)§        new_minion = self.target.copy(player)§        self.target.remove_from_board()§        new_minion.add_to_board(len(player.minions))§§    def can_use(self, player, game):§        return super().can_use(player, game) and len(player.minions) < 7§
class MindVision(SpellCard):§    def __init__(self):§        super().__init__("Mind Vision", 1, CHARACTER_CLASS.PRIEST, CARD_RARITY.COMMON)§§    def use(self, player, game):§        super().use(player, game)§§        if (len(game.other_player.hand) > 0):§            card = copy.deepcopy(game.random_choice(game.other_player.hand))§            player.hand.append(card)§            card.player = player§
class MirrorImage(SpellCard):§    def __init__(self):§        super().__init__("Mirror Image", 1, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON)§§    def use(self, player, game):§        super().use(player, game)§        for i in range(0, 2):§            MirrorImageMinion().summon(player, game, len(player.minions))§§    def can_use(self, player, game):§        return super().can_use(player, game) and len(player.minions) < 7§
class MirrorImage(SpellCard):§    def __init__(self):§        super().__init__("Mirror Image", 1, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON)§§    def use(self, player, game):§        super().use(player, game)§        for i in range(0, 2):§            MirrorImageMinion().summon(player, game, len(player.minions))§§    def can_use(self, player, game):§        return super().can_use(player, game) and len(player.minions) < 7§
class Misha(MinionCard):§    def __init__(self):§        super().__init__("Misha", 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.BEAST)§§    def create_minion(self, player):§        return Minion(4, 4, taunt=True)§
class Moonfire(SpellCard):§    def __init__(self):§        super().__init__("Moonfire", 0, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_spell_target)§§    def use(self, player, game):§        super().use(player, game)§        self.target.damage(player.effective_spell_damage(1), self)§
class MurlocRaider(MinionCard):§    def __init__(self):§        super().__init__("Murloc Raider", 1, CHARACTER_CLASS.ALL, CARD_RARITY.FREE, minion_type=MINION_TYPE.MURLOC)§§    def create_minion(self, player):§        return Minion(2, 1)§
class MurlocScout(MinionCard):§    def __init__(self):§        super().__init__("Murloc Scout", 0, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.MURLOC)§§    def create_minion(self, player):§        return Minion(1, 1)§
class MurlocTidehunter(MinionCard):§    def __init__(self):§        super().__init__("Murloc Tidehunter", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MURLOC, battlecry=Battlecry(Summon(MurlocScout()), PlayerSelector()))§§    def create_minion(self, player):§        return Minion(2, 1)§
class Nightblade(MinionCard):§    def __init__(self):§        super().__init__("Nightblade", 5, CHARACTER_CLASS.ALL, CARD_RARITY.FREE, battlecry=Battlecry(Damage(3), HeroSelector(EnemyPlayer())))§§    def create_minion(self, player):§        return Minion(4, 4)§
class NorthshireCleric(MinionCard):§    def __init__(self):§        super().__init__("Northshire Cleric", 1, CHARACTER_CLASS.PRIEST, CARD_RARITY.FREE)§§    def create_minion(self, player):§        return Minion(1, 3, effects=[Effect(CharacterHealed(condition=IsMinion(), player=BothPlayer()), ActionTag(Draw(), PlayerSelector()))])§
class NoviceEngineer(MinionCard):§    def __init__(self):§        super().__init__("Novice Engineer", 2, CHARACTER_CLASS.ALL, CARD_RARITY.FREE, battlecry=Battlecry(Draw(), PlayerSelector()))§§    def create_minion(self, player):§        return Minion(1, 1)§
class OasisSnapjaw(MinionCard):§    def __init__(self):§        super().__init__("Oasis Snapjaw", 4, CHARACTER_CLASS.ALL, CARD_RARITY.FREE, minion_type=MINION_TYPE.BEAST)§§    def create_minion(self, player):§        return Minion(2, 7)§
class OgreMagi(MinionCard):§    def __init__(self):§        super().__init__("Ogre Magi", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)§§    def create_minion(self, player):§        return Minion(4, 4, spell_damage=1)§
class RaidLeader(MinionCard):§    def __init__(self):§        super().__init__("Raid Leader", 3, CHARACTER_CLASS.ALL, CARD_RARITY.FREE)§§    def create_minion(self, player):§        return Minion(2, 2, auras=[Aura(ChangeAttack(1), MinionSelector())])§
class RazorfenHunter(MinionCard):§    def __init__(self):§        super().__init__("Razorfen Hunter", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Summon(Boar()), PlayerSelector()))§§    def create_minion(self, player):§        return Minion(2, 3)§
class RecklessRocketeer(MinionCard):§    def __init__(self):§        super().__init__("Reckless Rocketeer", 6, CHARACTER_CLASS.ALL, CARD_RARITY.FREE)§§    def create_minion(self, player):§        return Minion(5, 2, charge=True)§
class RiverCrocolisk(MinionCard):§    def __init__(self):§        super().__init__("River Crocolisk", 2, CHARACTER_CLASS.ALL, CARD_RARITY.FREE, minion_type=MINION_TYPE.BEAST)§§    def create_minion(self, player):§        return Minion(2, 3)§
class RockbiterWeapon(SpellCard):§    def __init__(self):§        super().__init__("Rockbiter Weapon", 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_friendly_spell_target)§§    def use(self, player, game):§        super().use(player, game)§        self.target.change_temp_attack(3)§
class SacrificialPact(SpellCard):§    def __init__(self):§        super().__init__("Sacrificial Pact", 0, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_spell_target, filter_func=lambda character: character.card.minion_type == MINION_TYPE.DEMON)§§    def use(self, player, game):§        super().use(player, game)§        self.target.die(self)§        player.hero.heal(player.effective_heal_power(5), self)§
class Sap(SpellCard):§    def __init__(self):§        super().__init__("Sap", 2, CHARACTER_CLASS.ROGUE, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_enemy_minion_spell_target)§§    def use(self, player, game):§        super().use(player, game)§§        self.target.bounce()§
class SavageRoar(SpellCard):§    def __init__(self):§        super().__init__("Savage Roar", 3, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON)§§    def use(self, player, game):§        super().use(player, game)§        for minion in player.minions:§            minion.change_temp_attack(2)§        player.hero.change_temp_attack(2)§
class ShadowBolt(SpellCard):§    def __init__(self):§        super().__init__("Shadow Bolt", 3, CHARACTER_CLASS.WARLOCK, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)§§    def use(self, player, game):§        super().use(player, game)§        self.target.damage(player.effective_spell_damage(4), self)§
class ShadowWordDeath(SpellCard):§    def __init__(self):§        super().__init__("Shadow Word: Death", 3, CHARACTER_CLASS.PRIEST, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target, filter_func=lambda target: target.calculate_attack() >= 5 and target.spell_targetable())§§    def use(self, player, game):§        super().use(player, game)§§        self.target.die(self)§
class ShadowWordPain(SpellCard):§    def __init__(self):§        super().__init__("Shadow Word: Pain", 2, CHARACTER_CLASS.PRIEST, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_minion_spell_target, filter_func=lambda target: target.calculate_attack() <= 3 and target.spell_targetable())§§    def use(self, player, game):§        super().use(player, game)§§        self.target.die(self)§
class ShatteredSunCleric(MinionCard):§    def __init__(self):§        super().__init__("Shattered Sun Cleric", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]), MinionSelector(picker=UserPicker())))§§    def create_minion(self, player):§        return Minion(3, 2)§
class Sheep(MinionCard):§    def __init__(self):§        super().__init__("Sheep", 0, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, MINION_TYPE.BEAST)§§    def create_minion(self, p):§        return Minion(1, 1)§
class ShieldBlock(SpellCard):§    def __init__(self):§        super().__init__("Shield Block", 3, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON)§§    def use(self, player, game):§        super().use(player, game)§        player.hero.increase_armor(5)§        player.draw()§
class Shiv(SpellCard):§    def __init__(self):§        super().__init__("Shiv", 2, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_spell_target)§§    def use(self, player, game):§        super().use(player, game)§§        self.target.damage(player.effective_spell_damage(1), self)§        player.draw()§
class SilverHandRecruit(MinionCard):§    def __init__(self):§        super().__init__("Silver Hand Recruit", 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.FREE, False)§§    def create_minion(self, player):§        return Minion(1, 1)§
class Soulfire(SpellCard):§    def __init__(self):§        super().__init__("Soulfire", 1, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_spell_target)§§    def use(self, player, game):§        super().use(player, game)§        self.target.damage(player.effective_spell_damage(4), self)§        player.discard()§
class Sprint(SpellCard):§    def __init__(self):§        super().__init__("Sprint", 7, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON)§§    def use(self, player, game):§        super().use(player, game)§§        for i in range(0, 4):§            player.draw()§
class Starfire(SpellCard):§    def __init__(self):§        super().__init__("Starfire", 6, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_spell_target)§§    def use(self, player, game):§        super().use(player, game)§        self.target.damage(player.effective_spell_damage(5), self)§        player.draw()§
class StarvingBuzzard(MinionCard):§    def __init__(self):§        super().__init__("Starving Buzzard", 5, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)§§    def create_minion(self, player):§        return Minion(3, 2, effects=[Effect(MinionPlaced(IsType(MINION_TYPE.BEAST)), ActionTag(Draw(), PlayerSelector()))])§
class StoneclawTotem(MinionCard):§    def __init__(self):§        super().__init__("Stoneclaw Totem", 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE, False, MINION_TYPE.TOTEM)§§    def create_minion(self, player):§        return Minion(0, 2, taunt=True)§
class StonetuskBoar(MinionCard):§    def __init__(self):§        super().__init__("Stonetusk Boar", 1, CHARACTER_CLASS.ALL, CARD_RARITY.FREE, minion_type=MINION_TYPE.BEAST)§§    def create_minion(self, player):§        return Minion(1, 1, charge=True)§
class StormpikeCommando(MinionCard):§    def __init__(self):§        super().__init__("Stormpike Commando", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Damage(2), CharacterSelector(players=BothPlayer(), picker=UserPicker())))§§    def create_minion(self, player):§        return Minion(4, 2)§
class StormwindChampion(MinionCard):§    def __init__(self):§        super().__init__("Stormwind Champion", 7, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)§§    def create_minion(self, player):§        return Minion(6, 6, auras=[Aura(ChangeAttack(1), MinionSelector()), Aura(ChangeHealth(1), MinionSelector())])§
class Swipe(SpellCard):§    def __init__(self):§        super().__init__("Swipe", 4, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_enemy_spell_target)§§    def use(self, player, game):§        super().use(player, game)§        self.target.damage(4, self)§§        for minion in copy.copy(game.other_player.minions):§            if minion is not self.target:§                minion.damage(player.effective_spell_damage(1), self)§§        if self.target is not game.other_player.hero:§            game.other_player.hero.damage(player.effective_spell_damage(1), self)§
class TimberWolf(MinionCard):§    def __init__(self):§        super().__init__("Timber Wolf", 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.FREE, minion_type=MINION_TYPE.BEAST)§§    def create_minion(self, player):§        return Minion(1, 1, auras=[Aura(ChangeAttack(1), MinionSelector(IsType(MINION_TYPE.BEAST)))])§
class TotemicMight(SpellCard):§    def __init__(self):§        super().__init__("Totemic Might", 0, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON)§§    def use(self, player, game):§        super().use(player, game)§§        for minion in player.minions:§            if minion.card.minion_type == MINION_TYPE.TOTEM:§                minion.increase_health(2)§
class Tracking(SpellCard):§    def __init__(self):§        super().__init__("Tracking", 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.FREE)§§    def use(self, player, game):§        super().use(player, game)§        cards = []§        for card_index in range(0, 3):§            if player.can_draw():§                cards.append(player.deck.draw(game))§        if len(cards) > 0:§            chosen_card = player.agent.choose_option(cards, player)§            player.hand.append(chosen_card)§            player.hand[-1].player = player§            player.trigger("card_drawn", chosen_card)§
class TruesilverChampion(WeaponCard):§    def __init__(self):§        super().__init__("Truesilver Champion", 4, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON)§§    def create_weapon(self, player):§        return Weapon(4, 2, effects=[Effect(CharacterAttack(IsHero()), ActionTag(Heal(2), HeroSelector()))])§
class TundraRhino(MinionCard):§    def __init__(self):§        super().__init__("Tundra Rhino", 5, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)§§    def create_minion(self, player):§        return Minion(2, 5, charge=True, auras=[Aura(Charge(), MinionSelector(IsType(MINION_TYPE.BEAST)))])§
class Vanish(SpellCard):§    def __init__(self):§        super().__init__("Vanish", 6, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON)§§    def use(self, player, game):§        super().use(player, game)§§        targets = copy.copy(game.other_player.minions)§        targets.extend(player.minions)§§        for minion in sorted(targets, key=lambda m: m.born):§            minion.bounce()§
class Voidwalker(MinionCard):§    def __init__(self):§        super().__init__("Voidwalker", 1, CHARACTER_CLASS.WARLOCK, CARD_RARITY.FREE, minion_type=MINION_TYPE.DEMON)§§    def create_minion(self, player):§        return Minion(1, 3, taunt=True)§
class WarsongCommander(MinionCard):§    def __init__(self):§        super().__init__("Warsong Commander", 3, CHARACTER_CLASS.WARRIOR, CARD_RARITY.FREE)§§    def create_minion(self, player):§        return Minion(2, 3, effects=[Effect(MinionPlaced(AttackLessThanOrEqualTo(3)), ActionTag(Give(Charge()), TargetSelector()))])§
class WaterElemental(MinionCard):§    def __init__(self):§        super().__init__("Water Elemental", 4, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON)§§    def create_minion(self, player):§        return Minion(3, 6, effects=[Effect(DidDamage(), ActionTag(Give(Frozen()), TargetSelector()))])§
class Whirlwind(SpellCard):§    def __init__(self):§        super().__init__("Whirlwind", 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON)§§    def use(self, player, game):§        super().use(player, game)§        targets = copy.copy(game.other_player.minions)§        targets.extend(game.current_player.minions)§        for minion in targets:§            minion.damage(player.effective_spell_damage(1), self)§
class WickedKnife(WeaponCard):§    def __init__(self):§        super().__init__("Wicked Knife", 1, CHARACTER_CLASS.ROGUE, CARD_RARITY.FREE, False)§§    def create_weapon(self, player):§        return Weapon(1, 2)§
class WildGrowth(SpellCard):§    def __init__(self):§        super().__init__("Wild Growth", 2, CHARACTER_CLASS.DRUID, CARD_RARITY.FREE)§§    def use(self, player, game):§        super().use(player, game)§        if player.max_mana < 10:§            player.max_mana += 1§        else:§            player.hand.append(ExcessMana())§            player.hand[-1].player = player§
class Windfury(SpellCard):§    def __init__(self):§        super().__init__("Windfury", 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)§§    def use(self, player, game):§        super().use(player, game)§§        self.target.add_buff(Buff(_Windfury()))§
class Windspeaker(MinionCard):§    def __init__(self):§        super().__init__("Windspeaker", 4, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON, battlecry=Battlecry(Give(Windfury()), MinionSelector(picker=UserPicker())))§§    def create_minion(self, player):§        return Minion(3, 3)§
class Wolfrider(MinionCard):§    def __init__(self):§        super().__init__("Wolfrider", 3, CHARACTER_CLASS.ALL, CARD_RARITY.FREE)§§    def create_minion(self, player):§        return Minion(3, 1, charge=True)§
class AlexstraszasChampion(MinionCard):§    def __init__(self):§        super().__init__("Alexstrasza's Champion", 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.RARE, battlecry=(Battlecry(Give([Buff(ChangeAttack(1)), Buff(Charge())]), SelfSelector(), GreaterThan(Count(CardSelector(condition=IsType(MINION_TYPE.DRAGON))), value=0))))§§    def create_minion(self, player):§        return Minion(2, 3)§
class AncestralKnowledge(SpellCard):§    def __init__(self):§        super().__init__("Ancestral Knowledge", 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON, overload=2)§§    def use(self, player, game):§        super().use(player, game)§        for c in range(0, 2):§            player.draw()§
class Anubarak(MinionCard):§    def __init__(self):§        super().__init__("Anub'arak", 9, CHARACTER_CLASS.ROGUE, CARD_RARITY.LEGENDARY)§§    def create_minion(self, player):§        return Minion(8, 4, deathrattle=[Deathrattle(Bounce(), SelfSelector()), Deathrattle(Summon(Nerubian()), PlayerSelector())])§
class ArcaneBlast(SpellCard):§    def __init__(self):§        super().__init__("Arcane Blast", 1, CHARACTER_CLASS.MAGE, CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.find_minion_spell_target)§§    def use(self, player, game):§        super().use(player, game)§        self.target.damage(player.effective_spell_damage(2 + player.spell_damage), self)§
class ArgentHorserider(MinionCard):§    def __init__(self):§        super().__init__("Argent Horserider", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)§§    def create_minion(self, player):§        return Minion(2, 1, charge=True, divine_shield=True)§
class ArgentLance(WeaponCard):§    def __init__(self):§        super().__init__("Argent Lance", 2, CHARACTER_CLASS.PALADIN, CARD_RARITY.RARE, battlecry=Battlecry(Joust(IncreaseDurability()), SelfSelector()))§§    def create_weapon(self, player):§        return Weapon(2, 2)§
class ArgentWatchman(MinionCard):§    def __init__(self):§        super().__init__("Argent Watchman", 2, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)§§    def create_minion(self, player):§        return Minion(2, 4, buffs=[Buff(CantAttack())], effects=[Effect(UsedPower(), ActionTag(Give(BuffUntil(CanAttack(), TurnEnded())), SelfSelector()))])§
class ArmoredWarhorse(MinionCard):§    def __init__(self):§        super().__init__("Armored Warhorse", 4, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, minion_type=MINION_TYPE.BEAST, battlecry=Battlecry(Joust(Give(Buff(Charge()))), SelfSelector()))§§    def create_minion(self, player):§        return Minion(5, 3)§
class HealingTotem(MinionCard):§    def __init__(self):§        super().__init__("Healing Totem", 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE, False, MINION_TYPE.TOTEM)§§    def create_minion(self, player):§        return Minion(0, 2, effects=[Effect(TurnEnded(), ActionTag(Heal(1), MinionSelector(condition=None)))])§
class Nerubian(MinionCard):§    def __init__(self):§        super().__init__("Nerubian", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, False)§§    def create_minion(self, p):§        return Minion(4, 4)§
class SearingTotem(MinionCard):§    def __init__(self):§        super().__init__("Searing Totem", 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE, False, MINION_TYPE.TOTEM)§§    def create_minion(self, player):§        return Minion(1, 1)§
class StoneclawTotem(MinionCard):§    def __init__(self):§        super().__init__("Stoneclaw Totem", 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE, False, MINION_TYPE.TOTEM)§§    def create_minion(self, player):§        return Minion(0, 2, taunt=True)§
class TournamentMedic(MinionCard):§    def __init__(self):§        super().__init__("Tournament Medic", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)§§    def create_minion(self, player):§        return Minion(1, 8, effects=[Effect(UsedPower(), ActionTag(Heal(2), HeroSelector()))])§
class WrathOfAirTotem(MinionCard):§    def __init__(self):§        super().__init__("Wrath of Air Totem", 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE, False, MINION_TYPE.TOTEM)§§    def create_minion(self, player):§        return Minion(0, 2, spell_damage=1)§
class AncestorsCall(SpellCard):§    def __init__(self):§        super().__init__("Ancestor's Call", 4, CHARACTER_CLASS.SHAMAN, CARD_RARITY.EPIC)§§    def can_use(self, player, game):§        return super().can_use(player, game) and (len(player.minions) < 7 or len(player.opponent.minions) < 7)§§    def use(self, player, game):§        super().use(player, game)§        for player in game.players:§            minions = [card for card in player.hand if card.is_minion()]§            if len(minions) and len(player.minions) < 7:§                minion_card = game.random_choice(minions)§                minion_card.unattach()§                player.hand.remove(minion_card)§                minion_card.summon(player, game, len(player.minions))§
class AnimaGolem(MinionCard):§    def __init__(self):§        super().__init__("Anima Golem", 6, CHARACTER_CLASS.WARLOCK, CARD_RARITY.EPIC, minion_type=MINION_TYPE.MECH)§§    def create_minion(self, player):§        return Minion(9, 9, effects=[Effect(TurnEnded(MinionCountIs(1), BothPlayer()), ActionTag(Kill(), SelfSelector()))])§
class AntiqueHealbot(MinionCard):§    def __init__(self):§        super().__init__("Antique Healbot", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, battlecry=Battlecry(Heal(8), HeroSelector()))§§    def create_minion(self, player):§        return Minion(3, 3)§
class ArcaneNullifierX21(MinionCard):§    def __init__(self):§        super().__init__("Arcane Nullifier X-21", 4, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)§§    def create_minion(self, player):§        return Minion(2, 5, taunt=True, spell_targetable=False)§
class ArmorPlating(SpellCard):§    def __init__(self):§        super().__init__("Armor Plating", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.find_minion_spell_target)§§    def use(self, player, game):§        super().use(player, game)§        self.target.increase_health(1)§
class Blingtron3000(MinionCard):§    def __init__(self):§        super().__init__("Blingtron 3000", 5, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH, battlecry=Battlecry(Equip(CardQuery(conditions=[IsWeapon()])), PlayerSelector(players=BothPlayer())))§§    def create_minion(self, player):§        return Minion(3, 4)§
class BolvarFordragon(MinionCard):§    def __init__(self):§        super().__init__("Bolvar Fordragon", 5, CHARACTER_CLASS.PALADIN, CARD_RARITY.LEGENDARY, effects=[Effect(MinionDied(), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])§§    def create_minion(self, player):§        return Minion(1, 7)§
class BombLobber(MinionCard):§    def __init__(self):§        super().__init__("Bomb Lobber", 5, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, battlecry=Battlecry(Damage(4), MinionSelector(None, EnemyPlayer(), RandomPicker())))§§    def create_minion(self, player):§        return Minion(3, 3)§
class BoomBot(MinionCard):§    def __init__(self):§        super().__init__("Boom Bot", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.MECH)§§    def create_minion(self, player):§        return Minion(1, 1, deathrattle=Deathrattle(Damage(RandomAmount(1, 4)), CharacterSelector(players=EnemyPlayer(), picker=RandomPicker())))§
class BouncingBlade(SpellCard):§    def __init__(self):§        super().__init__("Bouncing Blade", 3, CHARACTER_CLASS.WARRIOR, CARD_RARITY.EPIC)§§    def can_use(self, player, game):§        return super().can_use(player, game) and len(player.minions) + len(player.opponent.minions) >= 1§§    def use(self, player, game):§        super().use(player, game)§§        targets = player.minions[:] + player.opponent.minions[:]§        if len(targets):§            for bounces in range(80):§                target = game.random_choice(targets)§                target.damage(player.effective_spell_damage(1), self)§                if target.dead:§                    break§
class CallPet(SpellCard):§    def __init__(self):§        super().__init__("Call Pet", 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)§§    def use(self, player, game):§        def reduce_cost(card):§            if card.is_minion() and card.minion_type == MINION_TYPE.BEAST:§                card.add_buff(Buff(ManaChange(-4)))§§        super().use(player, game)§        player.bind_once("card_drawn", reduce_cost)§        player.draw()§
class Chicken(MinionCard):§    def __init__(self):§        super().__init__("Chicken", 0, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, MINION_TYPE.BEAST)§§    def create_minion(self, p):§        return Minion(1, 1)§
class ClockworkGiant(MinionCard):§    def __init__(self):§        super().__init__("Clockwork Giant", 12, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, minion_type=MINION_TYPE.MECH, buffs=[Buff(ManaChange(Count(CardSelector(EnemyPlayer())), -1))])§§    def create_minion(self, player):§        return Minion(8, 8)§
class ClockworkGnome(MinionCard):§    def __init__(self):§        super().__init__("Clockwork Gnome", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)§§    def create_minion(self, player):§        from hearthbreaker.cards.spells.neutral import spare_part_list§        return Minion(2, 1, deathrattle=Deathrattle(AddCard(CardQuery(source=CARD_SOURCE.LIST, source_list=spare_part_list)), PlayerSelector()))§
class CobaltGuardian(MinionCard):§    def __init__(self):§        super().__init__("Cobalt Guardian", 5, CHARACTER_CLASS.PALADIN, CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)§§    def create_minion(self, player):§        return Minion(6, 3, effects=[Effect(MinionSummoned(IsType(MINION_TYPE.MECH)), ActionTag(Give(DivineShield()), SelfSelector()))])§
class CobraShot(SpellCard):§    def __init__(self):§        super().__init__("Cobra Shot", 5, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)§§    def use(self, player, game):§        super().use(player, game)§        self.target.damage(player.effective_spell_damage(3), self)§        game.other_player.hero.damage(player.effective_spell_damage(3), self)§
class Coghammer(WeaponCard):§    def __init__(self):§        super().__init__("Coghammer", 3, CHARACTER_CLASS.PALADIN, CARD_RARITY.EPIC, battlecry=Battlecry(Give([Buff(DivineShield()), Buff(Taunt())]), MinionSelector(picker=RandomPicker())))§§    def create_weapon(self, player):§        return Weapon(2, 3)§
class Cogmaster(MinionCard):§    def __init__(self):§        super().__init__("Cogmaster", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)§§    def create_minion(self, player):§        return Minion(1, 2, auras=[Aura(ChangeAttack(2), SelfSelector(), GreaterThan(Count(MinionSelector(IsType(MINION_TYPE.MECH))), value=0))])§
class Crush(SpellCard):§    def __init__(self):§        super().__init__("Crush", 7, CHARACTER_CLASS.WARRIOR, CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.find_minion_spell_target, buffs=[Buff(ManaChange(-4), GreaterThan(Count(MinionSelector(IsDamaged())), value=0))])§§    def use(self, player, game):§        super().use(player, game)§§        self.target.die(self)§
class DarkWispers(SpellCard):§    def __init__(self):§        super().__init__("Dark Wispers", 6, CHARACTER_CLASS.DRUID, CARD_RARITY.EPIC)§§    def can_use(self, player, game):§        return (super().can_use(player, game) and (len(player.minions) < 7 or hearthbreaker.targeting.find_minion_spell_target(game, lambda t: t.spell_targetable()) is not None))§§    def use(self, player, game):§        super().use(player, game)§§        class Buff5(ChoiceCard):§            def __init__(self):§                super().__init__("Give a minion +5/+5 and Taunt", 0, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, False)§§            def can_use(self, player, game):§                return hearthbreaker.targeting.find_minion_spell_target(game, lambda t: t.spell_targetable()) is not None§§            def use(self, player, game):§                targets = hearthbreaker.targeting.find_minion_spell_target(game, lambda t: t.spell_targetable())§                target = player.agent.choose_target(targets)§                target.change_attack(5)§                target.increase_health(5)§                target.taunt = True§§        class Wisps5(ChoiceCard):§            def __init__(self):§                super().__init__("Summon 5 Wisps", 0, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, False)§§            def can_use(self, player, game):§                return len(player.minions) < 7§§            def use(self, player, game):§                from hearthbreaker.cards.minions.neutral import Wisp§                for i in range(0, 5):§                    wisp = Wisp()§                    wisp.summon(player, game, len(player.minions))§§        if len(hearthbreaker.targeting.find_minion_spell_target(game, lambda t: t.spell_targetable())) == 0:§            option = Wisps5()§        else:§            option = player.agent.choose_option([Wisps5(), Buff5()], player)§        option.use(player, game)§
class Darkbomb(SpellCard):§    def __init__(self):§        super().__init__("Darkbomb", 2, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_spell_target)§§    def use(self, player, game):§        super().use(player, game)§        self.target.damage(player.effective_spell_damage(3), self)§
class Demonheart(SpellCard):§    def __init__(self):§        super().__init__("Demonheart", 5, CHARACTER_CLASS.WARLOCK, CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.find_minion_spell_target)§§    def use(self, player, game):§        super().use(player, game)§        targets = copy.copy(player.game.current_player.minions)§        if self.target.card.minion_type is MINION_TYPE.DEMON and self.target in targets:§            self.target.change_attack(5)§            self.target.increase_health(5)§        else:§            self.target.damage(player.effective_spell_damage(5), self)§
class DoctorBoom(MinionCard):§    def __init__(self):§        super().__init__("Dr. Boom", 7, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, battlecry=Battlecry(Summon(BoomBot(), 2), PlayerSelector()))§§    def create_minion(self, player):§        return Minion(7, 7)§
class DruidOfTheFang(MinionCard):§    def __init__(self):§        super().__init__("Druid of the Fang", 5, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, battlecry=Battlecry(Transform(CobraForm()), SelfSelector(), GreaterThan(Count(MinionSelector(IsType(MINION_TYPE.BEAST))), value=0)))§§    def create_minion(self, player):§        return Minion(4, 4)§
class DruidOfTheFang(MinionCard):§    def __init__(self):§        super().__init__("Druid of the Fang", 5, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, battlecry=Battlecry(Transform(CobraForm()), SelfSelector(), GreaterThan(Count(MinionSelector(IsType(MINION_TYPE.BEAST))), value=0)))§§    def create_minion(self, player):§        return Minion(4, 4)§
class DunemaulShaman(MinionCard):§    def __init__(self):§        super().__init__("Dunemaul Shaman", 4, CHARACTER_CLASS.SHAMAN, CARD_RARITY.RARE, overload=1)§§    def create_minion(self, player):§        return Minion(5, 4, windfury=True, effects=[Effect(Attack(), ActionTag(ChangeTarget(CharacterSelector(NotCurrentTarget(), EnemyPlayer(), RandomPicker())), SelfSelector(), And(OneIn(2), OpponentMinionCountIsGreaterThan(0))))])§
class EnhanceoMechano(MinionCard):§    def __init__(self):§        super().__init__("Enhance-o Mechano", 4, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, minion_type=MINION_TYPE.MECH, battlecry=Battlecry(Give([ Buff(Windfury()), Buff(Taunt()), Buff(DivineShield())], RandomPicker()), MinionSelector()))§§    def create_minion(self, player):§        return Minion(3, 2)§
class ExplosiveSheep(MinionCard):§    def __init__(self):§        super().__init__("Explosive Sheep", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)§§    def create_minion(self, player):§        return Minion(1, 1, deathrattle=Deathrattle(Damage(2), CharacterSelector(players=BothPlayer())), taunt=True)§
class FeignDeath(SpellCard):§    def __init__(self):§        super().__init__("Feign Death", 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.EPIC)§§    def use(self, player, game):§        super().use(player, game)§§        for minion in sorted(player.minions, key=lambda m: m.born):§            for deathrattle in minion.deathrattle:§                deathrattle.do(minion)§            if player.double_deathrattle:§                for deathrattle in minion.deathrattle:§                    deathrattle.do(minion)§
class FelCannon(MinionCard):§    def __init__(self):§        super().__init__("Fel Cannon", 4, CHARACTER_CLASS.WARLOCK, CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)§§    def create_minion(self, player):§        return Minion(3, 5, effects=[Effect(TurnEnded(), ActionTag(Damage(2), MinionSelector(Not(IsType(MINION_TYPE.MECH, True)), BothPlayer(), RandomPicker())))])§
class FelReaver(MinionCard):§    def __init__(self):§        super().__init__("Fel Reaver", 5, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, minion_type=MINION_TYPE.MECH)§§    def create_minion(self, player):§        return Minion(8, 8, effects=[Effect(CardPlayed(player=EnemyPlayer()), ActionTag(Discard(3, query=CardQuery(source=CARD_SOURCE.MY_DECK)), PlayerSelector()))])§
class FinickyCloakfield(SpellCard):§    def __init__(self):§        super().__init__("Finicky Cloakfield", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.find_friendly_minion_spell_target)§§    def use(self, player, game):§        super().use(player, game)§        self.target.add_buff(BuffUntil(Stealth(), TurnStarted()))§
class FlameLeviathan(MinionCard):§    def __init__(self):§        super().__init__("Flame Leviathan", 7, CHARACTER_CLASS.MAGE, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH, effects=[Effect(Drawn(), ActionTag(Damage(2), CharacterSelector(None, BothPlayer())))])§§    def create_minion(self, player):§        return Minion(7, 7)§
class Flamecannon(SpellCard):§    def __init__(self):§        super().__init__("Flamecannon", 2, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON)§§    def use(self, player, game):§        super().use(player, game)§§        targets = hearthbreaker.targeting.find_enemy_minion_battlecry_target(player.game, lambda x: True)§        target = game.random_choice(targets)§        target.damage(player.effective_spell_damage(4), self)§§    def can_use(self, player, game):§        return super().can_use(player, game) and len(game.other_player.minions) >= 1§
class FoeReaper4000(MinionCard):§    def __init__(self):§        super().__init__("Foe Reaper 4000", 8, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)§§    def create_minion(self, player):§        return Minion(6, 9, effects=[Effect(Attack(IsMinion()), ActionTag(Damage(Attribute("attack", SelfSelector())), MinionSelector(TargetAdjacent(), EnemyPlayer())))])§
class ForceTankMAX(MinionCard):§    def __init__(self):§        super().__init__("Force-Tank MAX", 8, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)§§    def create_minion(self, player):§        return Minion(7, 7, divine_shield=True)§
class Gahzrilla(MinionCard):§    def __init__(self):§        super().__init__("Gahz'rilla", 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.BEAST)§§    def create_minion(self, player):§        return Minion(6, 9, effects=[Effect(Damaged(), ActionTag(Give(Buff(DoubleAttack())), SelfSelector()))])§
class GallywixsCoin(SpellCard):§    def __init__(self):§        super().__init__("Gallywix's Coin", 0, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False)§§    def use(self, player, game):§        super().use(player, game)§        if player.mana < 10:§            player.mana += 1§
class Gazlowe(MinionCard):§    def __init__(self):§        super().__init__("Gazlowe", 6, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)§§    def create_minion(self, player):§        return Minion(3, 6, effects=[Effect(SpellCast(ManaCost(1)), ActionTag(AddCard(CardQuery(conditions=[IsType(MINION_TYPE.MECH)])), PlayerSelector()))])§
class GilblinStalker(MinionCard):§    def __init__(self):§        super().__init__("Gilblin Stalker", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)§§    def create_minion(self, player):§        return Minion(2, 3, stealth=True)§
class Glaivezooka(WeaponCard):§    def __init__(self):§        super().__init__("Glaivezooka", 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON, battlecry=Battlecry(Give(ChangeAttack(1)), MinionSelector(None, picker=RandomPicker())))§§    def create_weapon(self, player):§        return Weapon(2, 2)§
class GnomereganInfantry(MinionCard):§    def __init__(self):§        super().__init__("Gnomeregan Infantry", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)§§    def create_minion(self, player):§        return Minion(1, 4, charge=True, taunt=True)§
class GoblinBlastmage(MinionCard):§    def __init__(self):§        super().__init__("Goblin Blastmage", 4, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE, battlecry=Battlecry(Damage(1), CharacterSelector(None, EnemyPlayer(), RandomPicker(4)), GreaterThan(Count(MinionSelector(IsType(MINION_TYPE.MECH))), value=0)))§§    def create_minion(self, player):§        return Minion(5, 4)§
class GoblinSapper(MinionCard):§    def __init__(self):§        super().__init__("Goblin Sapper", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)§§    def create_minion(self, player):§        return Minion(2, 4, buffs=[Buff(ChangeAttack(4), GreaterThan(Count(CardSelector(EnemyPlayer())), value=5))])§
class GroveTender(MinionCard):§    def __init__(self):§        super().__init__("Grove Tender", 3, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE, choices=[§            Choice(GiftOfMana(), GiveManaCrystal(), PlayerSelector(players=BothPlayer())),§            Choice(GiftOfCards(), Draw(), PlayerSelector(players=BothPlayer()))§        ])§§    def create_minion(self, player):§        return Minion(2, 4)§
class HemetNesingwary(MinionCard):§    def __init__(self):§        super().__init__("Hemet Nesingwary", 5, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, battlecry=Battlecry(Kill(), MinionSelector(IsType(MINION_TYPE.BEAST), players=BothPlayer(), picker=UserPicker())))§§    def create_minion(self, player):§        return Minion(6, 3)§
class Hobgoblin(MinionCard):§    def __init__(self):§        super().__init__("Hobgoblin", 3, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC)§§    def create_minion(self, player):§        return Minion(2, 3, effects=[Effect(MinionPlaced(BaseAttackEqualTo(1)), ActionTag(Give([Buff(ChangeHealth(2)), Buff(ChangeAttack(2))]), TargetSelector()))])§
class Illuminator(MinionCard):§    def __init__(self):§        super().__init__("Illuminator", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)§§    def create_minion(self, player):§        return Minion(2, 4, effects=[Effect(TurnEnded(HasSecret()), ActionTag(Heal(4), HeroSelector()))])§
class Imp(MinionCard):§    def __init__(self):§        super().__init__("Imp", 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, False, minion_type=MINION_TYPE.DEMON)§§    def create_minion(self, player):§        return Minion(1, 1)§
class Implosion(SpellCard):§    def __init__(self):§        super().__init__("Imp-losion", 4, CHARACTER_CLASS.WARLOCK, CARD_RARITY.RARE, target_func=hearthbreaker.targeting.find_spell_target)§§    def use(self, player, game):§        super().use(player, game)§§        amount = player.effective_spell_damage(game.random_amount(2, 4))§        had_shield = self.target.divine_shield§§        self.target.damage(amount, self)§§        if not had_shield:§            for i in range(0, amount):§                imp = Imp()§                imp.summon(player, game, len(player.minions))§
class Jeeves(MinionCard):§    def __init__(self):§        super().__init__("Jeeves", 4, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)§§    def create_minion(self, player):§        return Minion(1, 4, effects=[Effect(TurnEnded(player=BothPlayer()), ActionTag(Draw(Difference(Count(CardSelector(players=CurrentPlayer())), value=3)), PlayerSelector(CurrentPlayer())))])§
class Junkbot(MinionCard):§    def __init__(self):§        super().__init__("Junkbot", 5, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, minion_type=MINION_TYPE.MECH)§§    def create_minion(self, player):§        return Minion(1, 5, effects=[Effect(MinionDied(IsType(MINION_TYPE.MECH)), ActionTag(Give([Buff(ChangeAttack(2)), Buff(ChangeHealth(2))]), SelfSelector()))])§
class KezanMystic(MinionCard):§    def __init__(self):§        super().__init__("Kezan Mystic", 4, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, battlecry=Battlecry(ApplySecret(CARD_SOURCE.ENEMY_SECRETS), PlayerSelector()))§§    def create_minion(self, player):§        return Minion(4, 3)§
class KingOfBeasts(MinionCard):§    def __init__(self):§        super().__init__("King of Beasts", 5, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE, minion_type=MINION_TYPE.BEAST, battlecry=Battlecry(Give(Buff(ChangeAttack(Count(MinionSelector(IsType( MINION_TYPE.BEAST)))))), SelfSelector()))§§    def create_minion(self, player):§        return Minion(2, 6, taunt=True)§
class LightOfTheNaaru(SpellCard):§    def __init__(self):§        super().__init__("Light of the Naaru", 1, CHARACTER_CLASS.PRIEST, CARD_RARITY.RARE, target_func=hearthbreaker.targeting.find_spell_target)§§    def use(self, player, game):§        super().use(player, game)§§        self.target.heal(player.effective_heal_power(3), self)§§        lightwarden = Lightwarden()§        if self.target is None:§            lightwarden.summon(player, game, len(player.minions))§        elif self.target.health != self.target.calculate_max_health():§            lightwarden.summon(player, game, len(player.minions))§
class Lightbomb(SpellCard):§    def __init__(self):§        super().__init__("Lightbomb", 6, CHARACTER_CLASS.PRIEST, CARD_RARITY.EPIC)§§    def use(self, player, game):§        super().use(player, game)§§        targets = copy.copy(game.other_player.minions)§        targets.extend(player.minions)§§        for minion in targets:§            minion.damage(player.effective_spell_damage(minion.calculate_attack()), self)§
class LilExorcist(MinionCard):§    def __init__(self):§        super().__init__("Lil' Exorcist", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(Count(MinionSelector(MinionHasDeathrattle(), EnemyPlayer())))), Buff(ChangeHealth(Count(MinionSelector(MinionHasDeathrattle(), EnemyPlayer()))))]), SelfSelector()))§§    def create_minion(self, player):§        return Minion(2, 3, taunt=True)§
class LostTallstrider(MinionCard):§    def __init__(self):§        super().__init__("Lost Tallstrider", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)§§    def create_minion(self, player):§        return Minion(5, 4)§
class Malorne(MinionCard):§    def __init__(self):§        super().__init__("Malorne", 7, CHARACTER_CLASS.DRUID, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.BEAST)§§    def create_minion(self, player):§        return Minion(9, 7, deathrattle=[Deathrattle(AddCard(CardQuery(source=CARD_SOURCE.MINION, minion=SelfSelector()), add_to_deck=True), PlayerSelector()), Deathrattle(Remove(), SelfSelector())])§
class MechBearCat(MinionCard):§    def __init__(self):§        super().__init__("Mech-Bear-Cat", 6, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)§§    def create_minion(self, player):§        return Minion(7, 6, effects=[Effect(Damaged(), ActionTag(AddCard(CardQuery(source=CARD_SOURCE.LIST, source_list=spare_part_list)), PlayerSelector()))])§
class MechanicalYeti(MinionCard):§    def __init__(self):§        super().__init__("Mechanical Yeti", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)§§    def create_minion(self, player):§        from hearthbreaker.cards.spells.neutral import spare_part_list§        return Minion(4, 5, deathrattle=Deathrattle(AddCard(CardQuery(source=CARD_SOURCE.LIST, source_list=spare_part_list)), PlayerSelector(BothPlayer())))§
class Mechwarper(MinionCard):§    def __init__(self):§        super().__init__("Mechwarper", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)§§    def create_minion(self, player):§        return Minion(2, 3, auras=[Aura(ManaChange(-1), CardSelector(condition=IsType(MINION_TYPE.MECH)))])§
class MekgineerThermaplugg(MinionCard):§    def __init__(self):§        super().__init__("Mekgineer Thermaplugg", 9, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)§§    def create_minion(self, player):§        return Minion(9, 7, effects=[Effect(MinionDied(player=EnemyPlayer()), ActionTag(Summon(LeperGnome()), PlayerSelector()))])§
class MetaltoothLeaper(MinionCard):§    def __init__(self):§        super().__init__("Metaltooth Leaper", 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=Battlecry(Give(Buff(ChangeAttack(2))), MinionSelector(IsType(MINION_TYPE.MECH))))§§    def create_minion(self, player):§        return Minion(3, 3)§
class MicroMachine(MinionCard):§    def __init__(self):§        super().__init__("Micro Machine", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)§§    def create_minion(self, player):§        return Minion(1, 2, effects=[Effect(TurnStarted(player=BothPlayer()), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])§
class MimironsHead(MinionCard):§    def __init__(self):§        super().__init__("Mimiron's Head", 5, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)§§    def create_minion(self, player):§        return Minion(4, 5, effects=[Effect(TurnStarted(), [ActionTag(Kill(), MinionSelector(IsType(MINION_TYPE.MECH, True)), GreaterThan(Count(MinionSelector(IsType(MINION_TYPE.MECH, True))), value=2)), ActionTag(Summon(V07TR0N()), PlayerSelector())])])§
class MogorTheOgre(MinionCard):§    def __init__(self):§        super().__init__("Mogor the Ogre", 6, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)§§    def create_minion(self, player):§        return Minion(7, 6, effects=[Effect(CharacterAttack(None, BothPlayer()), ActionTag(ChangeTarget(§            CharacterSelector(NotCurrentTarget(), EnemyPlayer(), RandomPicker())), TargetSelector(),§            And(OneIn(2), OpponentMinionCountIsGreaterThan(0))))])§
class MusterForBattle(SpellCard):§    def __init__(self):§        super().__init__("Muster for Battle", 3, CHARACTER_CLASS.PALADIN, CARD_RARITY.RARE)§§    def use(self, player, game):§        super().use(player, game)§§        for i in range(0, 3):§            dude = SilverHandRecruit()§            dude.summon(player, player.game, len(player.minions))§        justice = LightsJustice()§        hammer = justice.create_weapon(player)§        hammer.card = justice§        hammer.equip(player)§
class Neptulon(MinionCard):§    def __init__(self):§        from hearthbreaker.cards.minions.neutral import BluegillWarrior, ColdlightOracle, ColdlightSeer, \§            GrimscaleOracle, MurlocRaider, MurlocTidecaller, MurlocTidehunter, MurlocWarleader, OldMurkEye, \§            Puddlestomper§        murloc_list = [BluegillWarrior(), ColdlightOracle(), ColdlightSeer(), GrimscaleOracle(), MurlocRaider(), MurlocTidecaller(), MurlocTidehunter(), MurlocWarleader(), OldMurkEye(), Puddlestomper(), SiltfinSpiritwalker()]§        super().__init__("Neptulon", 7, CHARACTER_CLASS.SHAMAN, CARD_RARITY.LEGENDARY, overload=3, battlecry=Battlecry(AddCard(CardQuery(source=CARD_SOURCE.LIST, source_list=murloc_list), 4), PlayerSelector()))§§    def create_minion(self, player):§        return Minion(7, 7)§
class OgreBrute(MinionCard):§    def __init__(self):§        super().__init__("Ogre Brute", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)§§    def create_minion(self, player):§        return Minion(4, 4, effects=[Effect(Attack(), ActionTag(ChangeTarget(CharacterSelector(NotCurrentTarget(), EnemyPlayer(), RandomPicker())), SelfSelector(), And(OneIn(2), OpponentMinionCountIsGreaterThan(0))))])§
class OgreNinja(MinionCard):§    def __init__(self):§        super().__init__("Ogre Ninja", 5, CHARACTER_CLASS.ROGUE, CARD_RARITY.RARE)§§    def create_minion(self, player):§        return Minion(6, 6, stealth=True, effects=[Effect(Attack(), ActionTag(ChangeTarget( CharacterSelector(NotCurrentTarget(), EnemyPlayer(), RandomPicker())), SelfSelector(), And(OneIn(2), OpponentMinionCountIsGreaterThan(0))))])§
class OgreWarmaul(WeaponCard):§    def __init__(self):§        super().__init__("Ogre Warmaul", 3, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON)§§    def create_weapon(self, player):§        return Weapon(4, 2, effects=[Effect(CharacterAttack(IsHero()), ActionTag(ChangeTarget(CharacterSelector(NotCurrentTarget(), EnemyPlayer(), RandomPicker())), HeroSelector(), And(OneIn(2), OpponentMinionCountIsGreaterThan(0))))])§
class OneeyedCheat(MinionCard):§    def __init__(self):§        super().__init__("One-eyed Cheat", 2, CHARACTER_CLASS.ROGUE, CARD_RARITY.RARE, minion_type=MINION_TYPE.PIRATE)§§    def create_minion(self, player):§        return Minion(4, 1, effects=[Effect(MinionSummoned(IsType(MINION_TYPE.PIRATE)), ActionTag(Give(Stealth()), SelfSelector()))])§
class PilotedShredder(MinionCard):§    def __init__(self):§        super().__init__("Piloted Shredder", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)§§    def create_minion(self, player):§        return Minion(4, 3, deathrattle=Deathrattle(Summon(CardQuery(conditions=[ManaCost(2), IsMinion()])), PlayerSelector()))§
class Puddlestomper(MinionCard):§    def __init__(self):§        super().__init__("Puddlestomper", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MURLOC)§§    def create_minion(self, player):§        return Minion(3, 2)§
class Quartermaster(MinionCard):§    def __init__(self):§        super().__init__("Quartermaster", 5, CHARACTER_CLASS.PALADIN, CARD_RARITY.EPIC, battlecry=Battlecry(Give([Buff(ChangeAttack(2)), Buff(ChangeHealth(2))]), MinionSelector(HasCardName("Silver Hand Recruit"))))§§    def create_minion(self, player):§        return Minion(2, 5)§
class Recombobulator(MinionCard):§    def __init__(self):§        super().__init__("Recombobulator", 2, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, battlecry=Battlecry(Transform(CardQuery(conditions=[ ManaCost(Attribute("mana", SelfSelector())), IsMinion()])), MinionSelector(picker=UserPicker())))§§    def create_minion(self, player):§        return Minion(3, 2)§
class Recycle(SpellCard):§    def __init__(self):§        super().__init__("Recycle", 6, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE, target_func=hearthbreaker.targeting.find_enemy_minion_spell_target)§§    def use(self, player, game):§        super().use(player, game)§        player.opponent.deck.put_back(self.target)§        self.target.remove_from_board()§
class ReversingSwitch(SpellCard):§    def __init__(self):§        super().__init__("Reversing Switch", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.find_minion_spell_target)§§    def use(self, player, game):§        super().use(player, game)§        temp_attack = self.target.calculate_attack()§        temp_health = self.target.health§        if temp_attack == 0:§            self.target.die(None)§        else:§            self.target.set_attack_to(temp_health)§            self.target.set_health_to(temp_attack)§
class RustyHorn(SpellCard):§    def __init__(self):§        super().__init__("Rusty Horn", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.find_minion_spell_target)§§    def use(self, player, game):§        super().use(player, game)§        self.target.add_buff(Buff(Taunt()))§
class Sabotage(SpellCard):§    def __init__(self):§        super().__init__("Sabotage", 4, CHARACTER_CLASS.ROGUE, CARD_RARITY.EPIC)§§    def use(self, player, game):§        super().use(player, game)§        targets = hearthbreaker.targeting.find_enemy_minion_battlecry_target(player.game, lambda x: True)§        target = game.random_choice(targets)§        target.die(None)§        game.check_delayed()§        if player.cards_played > 0 and game.other_player.weapon is not None:§            game.other_player.weapon.destroy()§§    def can_use(self, player, game):§        return super().can_use(player, game) and len(game.other_player.minions) >= 1§
class SaltyDog(MinionCard):§    def __init__(self):§        super().__init__("Salty Dog", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.PIRATE)§§    def create_minion(self, player):§        return Minion(7, 4)§
class SealOfLight(SpellCard):§    def __init__(self):§        super().__init__("Seal of Light", 2, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON)§§    def use(self, player, game):§        super().use(player, game)§        player.hero.heal(player.effective_heal_power(4), self)§        player.hero.change_temp_attack(2)§
class Shadowbomber(MinionCard):§    def __init__(self):§        super().__init__("Shadowbomber", 1, CHARACTER_CLASS.PRIEST, CARD_RARITY.EPIC, battlecry=Battlecry(Damage(3), HeroSelector(players=BothPlayer())))§§    def create_minion(self, player):§        return Minion(2, 1)§
class Shadowboxer(MinionCard):§    def __init__(self):§        super().__init__("Shadowboxer", 2, CHARACTER_CLASS.PRIEST, CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)§§    def create_minion(self, player):§        return Minion(2, 3, effects=[Effect(CharacterHealed(player=BothPlayer()), ActionTag(Damage(1), CharacterSelector(players=EnemyPlayer(), picker=RandomPicker(), condition=None)))])§
class ShieldedMinibot(MinionCard):§    def __init__(self):§        super().__init__("Shielded Minibot", 2, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)§§    def create_minion(self, player):§        return Minion(2, 2, divine_shield=True)§
class Shieldmaiden(MinionCard):§    def __init__(self):§        super().__init__("Shieldmaiden", 6, CHARACTER_CLASS.WARRIOR, CARD_RARITY.RARE, battlecry=Battlecry(IncreaseArmor(5), HeroSelector()))§§    def create_minion(self, player):§        return Minion(5, 5)§
class ShipsCannon(MinionCard):§    def __init__(self):§        super().__init__("Ship's Cannon", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)§§    def create_minion(self, player):§        return Minion(2, 3, effects=[Effect(MinionSummoned(IsType(MINION_TYPE.PIRATE)), ActionTag(Damage(2), CharacterSelector(None, EnemyPlayer(), RandomPicker())))])§
class Shrinkmeister(MinionCard):§    def __init__(self):§        super().__init__("Shrinkmeister", 2, CHARACTER_CLASS.PRIEST, CARD_RARITY.COMMON, battlecry=Battlecry(Give(BuffUntil(ChangeAttack(-2), TurnEnded(player=CurrentPlayer()))), MinionSelector(players=BothPlayer(), picker=UserPicker())))§§    def create_minion(self, player):§        return Minion(3, 2)§
class SiegeEngine(MinionCard):§    def __init__(self):§        super().__init__("Siege Engine", 5, CHARACTER_CLASS.WARRIOR, CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)§§    def create_minion(self, player):§        return Minion(5, 5, effects=[Effect(ArmorIncreased(), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])§
class Snowchugger(MinionCard):§    def __init__(self):§        super().__init__("Snowchugger", 2, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)§§    def create_minion(self, player):§        return Minion(2, 3, effects=[Effect(DidDamage(), ActionTag(Give(Frozen()), TargetSelector()))])§
class SootSpewer(MinionCard):§    def __init__(self):§        super().__init__("Soot Spewer", 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)§§    def create_minion(self, player):§        return Minion(3, 3, spell_damage=1)§
class SpiderTank(MinionCard):§    def __init__(self):§        super().__init__("Spider Tank", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)§§    def create_minion(self, player):§        return Minion(3, 4)§
class SteamwheedleSniper(MinionCard):§    def __init__(self):§        super().__init__("Steamwheedle Sniper", 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.EPIC)§§    def create_minion(self, player):§        return Minion(2, 3, auras=[Aura(PowerTargetsMinions(), HeroSelector())])§
class StonesplinterTrogg(MinionCard):§    def __init__(self):§        super().__init__("Stonesplinter Trogg", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)§§    def create_minion(self, player):§        return Minion(2, 3, effects=[Effect(SpellCast(player=EnemyPlayer()), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])§
class TargetDummy(MinionCard):§    def __init__(self):§        super().__init__("Target Dummy", 0, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)§§    def create_minion(self, player):§        return Minion(0, 2, taunt=True)§
class TimeRewinder(SpellCard):§    def __init__(self):§        super().__init__("Time Rewinder", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.find_friendly_minion_spell_target)§§    def use(self, player, game):§        super().use(player, game)§        self.target.bounce()§
class TinkersSharpswordOil(SpellCard):§    def __init__(self):§        super().__init__("Tinker's Sharpsword Oil", 4, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON)§§    def use(self, player, game):§        super().use(player, game)§        player.weapon.base_attack += 3§        player.hero.change_temp_attack(3)§        if player.cards_played > 0:§            targets = hearthbreaker.targeting.find_friendly_minion_battlecry_target(player.game, lambda x: x)§            if targets is not None:§                target = player.game.random_choice(targets)§                target.add_buff(Buff(ChangeAttack(3)))§§    def can_use(self, player, game):§        return super().can_use(player, game) and player.weapon is not None§
class TradePrinceGallywix(MinionCard):§    def __init__(self):§        super().__init__("Trade Prince Gallywix", 6, CHARACTER_CLASS.ROGUE, CARD_RARITY.LEGENDARY)§§    def create_minion(self, player):§        return Minion(5, 8, effects=[Effect(SpellCast(Not(HasCardName("Gallywix's Coin")), EnemyPlayer()), ActionTag(AddCard(CardQuery(source=CARD_SOURCE.LAST_CARD)), PlayerSelector(FriendlyPlayer()))), Effect(SpellCast(Not(HasCardName("Gallywix's Coin")), EnemyPlayer()), ActionTag(AddCard(GallywixsCoin()), PlayerSelector(EnemyPlayer())))])§
class TreeOfLife(SpellCard):§    def __init__(self):§        super().__init__("Tree of Life", 9, CHARACTER_CLASS.DRUID, CARD_RARITY.EPIC)§§    def use(self, player, game):§        super().use(player, game)§§        targets = copy.copy(game.other_player.minions)§        targets.extend(game.current_player.minions)§        targets.append(game.other_player.hero)§        targets.append(game.current_player.hero)§        for target in targets:§            target.heal(player.effective_heal_power(target.calculate_max_health()), self)§
class TroggzorTheEarthinator(MinionCard):§    def __init__(self):§        super().__init__("Troggzor the Earthinator", 7, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)§§    def create_minion(self, player):§        return Minion(6, 6, effects=[Effect(SpellCast(player=EnemyPlayer()), ActionTag(Summon(BurlyRockjawTrogg()), PlayerSelector()))])§
class UnstablePortal(SpellCard):§    def __init__(self):§        super().__init__("Unstable Portal", 2, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)§§    def use(self, player, game):§        super().use(player, game)§        query = CardQuery(conditions=[IsMinion()])§        new_minon = query.get_card(player, player, self)§        new_minon.add_buff(Buff(ManaChange(-3)))§        player.hand.append(new_minon)§
class UpgradedRepairBot(MinionCard):§    def __init__(self):§        super().__init__("Upgraded Repair Bot", 5, CHARACTER_CLASS.PRIEST, CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=Battlecry(Give(ChangeHealth(4)), MinionSelector(IsType(MINION_TYPE.MECH), picker=UserPicker())))§§    def create_minion(self, player):§        return Minion(5, 5)§
class V07TR0N(MinionCard):§    def __init__(self):§        super().__init__("V-07-TR-0N", 8, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, False, MINION_TYPE.MECH)§§    def create_minion(self, player):§        return Minion(4, 8, charge=True, buffs=[Buff(MegaWindfury())])§
class VelensChosen(SpellCard):§    def __init__(self):§        super().__init__("Velen's Chosen", 3, CHARACTER_CLASS.PRIEST, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)§§    def use(self, player, game):§        super().use(player, game)§§        self.target.change_attack(2)§        self.target.increase_health(4)§        self.target.add_buff(Buff(SpellDamage(1)))§
class VitalityTotem(MinionCard):§    def __init__(self):§        super().__init__("Vitality Totem", 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.RARE, minion_type=MINION_TYPE.TOTEM)§§    def create_minion(self, player):§        return Minion(0, 3, effects=[Effect(TurnEnded(), ActionTag(Heal(4), HeroSelector()))])§
class WeeSpellstopper(MinionCard):§    def __init__(self):§        super().__init__("Wee Spellstopper", 4, CHARACTER_CLASS.MAGE, CARD_RARITY.EPIC)§§    def create_minion(self, player):§        return Minion(2, 5, auras=[Aura(NoSpellTarget(), MinionSelector(Adjacent()))])§
class WhirlingBlades(SpellCard):§    def __init__(self):§        super().__init__("Whirling Blades", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.find_minion_spell_target)§§    def use(self, player, game):§        super().use(player, game)§        self.target.change_attack(1)§
class WhirlingZapomatic(MinionCard):§    def __init__(self):§        super().__init__("Whirling Zap-o-matic", 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)§§    def create_minion(self, p):§        return Minion(3, 2, windfury=True)§
class AnubarAmbusher(MinionCard):§    def __init__(self):§        super().__init__("Anub'ar Ambusher", 4, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON)§§    def create_minion(self, player):§        return Minion(5, 5, deathrattle=Deathrattle(Bounce(), MinionSelector(picker=RandomPicker())))§
class Avenge(SecretCard):§    def __init__(self):§        super().__init__("Avenge", 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON)§§    def _reveal(self, dead_minion, attacker):§        if len([minion for minion in self.player.minions if not minion.dead]) > 0:§            target = self.player.game.random_choice(self.player.minions)§            target.change_attack(3)§            target.increase_health(2)§            super().reveal()§§    def activate(self, player):§        player.bind("minion_died", self._reveal)§§    def deactivate(self, player):§        player.unbind("minion_died", self._reveal)§
class BaronRivendare(MinionCard):§    def __init__(self):§        super().__init__("Baron Rivendare", 4, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)§§    def create_minion(self, player):§        return Minion(1, 7, auras=[Aura(DoubleDeathrattle(), PlayerSelector())])§
class DancingSwords(MinionCard):§    def __init__(self):§        super().__init__("Dancing Swords", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)§§    def create_minion(self, player):§        return Minion(4, 4, deathrattle=Deathrattle(Draw(), PlayerSelector(EnemyPlayer())))§
class DarkCultist(MinionCard):§    def __init__(self):§        super().__init__("Dark Cultist", 3, CHARACTER_CLASS.PRIEST, CARD_RARITY.COMMON)§§    def create_minion(self, player):§        return Minion(3, 4, deathrattle=Deathrattle(Give(ChangeHealth(3)), MinionSelector(picker=RandomPicker())))§
class Duplicate(SecretCard):§    def __init__(self):§        super().__init__("Duplicate", 3, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON)§        self.player = None§§    def activate(self, player):§        player.bind("minion_died", self._reveal)§        self.player = player§§    def deactivate(self, player):§        player.unbind("minion_died", self._reveal)§        self.player = None§§    def _reveal(self, minion, by):§        for c in range(0, 2):§            if len(self.player.hand) < 10:§                new_card = type(minion.card)()§                self.player.hand.append(new_card)§                new_card.attach(new_card, self.player)§        super().reveal()§
class EchoingOoze(MinionCard):§    def __init__(self):§        super().__init__("Echoing Ooze", 2, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, battlecry=Battlecry(GiveEffect(Effect(TurnEnded(), ActionTag(Duplicate(SelfSelector()), PlayerSelector()))), PlayerSelector()))§§    def create_minion(self, player):§        return Minion(1, 2)§
class Feugen(MinionCard):§    def __init__(self):§        super().__init__("Feugen", 5, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)§§    def create_minion(self, player):§        return Minion(4, 7, deathrattle=Deathrattle(Summon(Thaddius()), PlayerSelector(), InGraveyard(Stalagg())))§
class Feugen(MinionCard):§    def __init__(self):§        super().__init__("Feugen", 5, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)§§    def create_minion(self, player):§        return Minion(4, 7, deathrattle=Deathrattle(Summon(Thaddius()), PlayerSelector(), InGraveyard(Stalagg())))§
class HauntedCreeper(MinionCard):§    def __init__(self):§        super().__init__("Haunted Creeper", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)§§    def create_minion(self, player):§        return Minion(1, 2, deathrattle=Deathrattle(Summon(SpectralSpider(), 2), PlayerSelector()))§
class KelThuzad(MinionCard):§    def __init__(self):§        super().__init__("Kel'Thuzad", 8, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)§§    def create_minion(self, player):§        return Minion(6, 8, effects=[Effect(TurnEnded(player=BothPlayer()), ActionTag(ResurrectFriendly(), PlayerSelector()))])§
class Loatheb(MinionCard):§    def __init__(self):§        super().__init__("Loatheb", 5, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, battlecry=Battlecry(GiveAura(AuraUntil(ManaChange(5), CardSelector(condition=IsSpell()), TurnEnded())), PlayerSelector(players=EnemyPlayer())))§§    def create_minion(self, player):§        return Minion(5, 5)§
class MadScientist(MinionCard):§    def __init__(self):§        super().__init__("Mad Scientist", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)§§    def create_minion(self, player):§        return Minion(2, 2, deathrattle=Deathrattle(ApplySecret(CARD_SOURCE.MY_DECK), PlayerSelector()))§
class Nerubian(MinionCard):§    def __init__(self):§        super().__init__("Nerubian", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, False)§§    def create_minion(self, p):§        return Minion(4, 4)§
class Nerubian(MinionCard):§    def __init__(self):§        super().__init__("Nerubian", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, False)§§    def create_minion(self, p):§        return Minion(4, 4)§
class Nerubian(MinionCard):§    def __init__(self):§        super().__init__("Nerubian", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, False)§§    def create_minion(self, p):§        return Minion(4, 4)§
class NerubianEgg(MinionCard):§    def __init__(self):§        super().__init__("Nerubian Egg", 2, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)§§    def create_minion(self, player):§        return Minion(0, 2, deathrattle=Deathrattle(Summon(Nerubian()), PlayerSelector()))§
class PoisonSeeds(SpellCard):§    def __init__(self):§        super().__init__("Poison Seeds", 4, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON)§§    def use(self, player, game):§        super().use(player, game)§        from hearthbreaker.cards.minions.druid import PoisonSeedsTreant§        targets = hearthbreaker.targeting.find_minion_spell_target(game, lambda m: True)§        for target in targets:§            target.die(None)§§        game.check_delayed()§§        for target in targets:§            PoisonSeedsTreant().summon(target.player, target.game, len(target.player.minions))§
class Reincarnate(SpellCard):§§    def __init__(self):§        super().__init__("Reincarnate", 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)§§    def use(self, player, game):§        super().use(player, game)§        self.target.die(self)§        game.check_delayed()§        self.target.card.summon(self.target.player, game, len(self.target.player.minions))§
class ShadeOfNaxxramas(MinionCard):§    def __init__(self):§        super().__init__("Shade of Naxxramas", 3, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC)§§    def create_minion(self, player):§        return Minion(2, 2, stealth=True, effects=[Effect(TurnStarted(), ActionTag(Give([Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]), SelfSelector()))])§
class Slime(MinionCard):§    def __init__(self):§        super().__init__("Slime", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False)§§    def create_minion(self, p):§        return Minion(1, 2, taunt=True)§
class SpectralSpider(MinionCard):§    def __init__(self):§        super().__init__("Spectral Spider", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False)§§    def create_minion(self, player):§        return Minion(1, 1)§
class Stalagg(MinionCard):§    def __init__(self):§        super().__init__("Stalagg", 5, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)§§    def create_minion(self, player):§        return Minion(7, 4, deathrattle=Deathrattle(Summon(Thaddius()), PlayerSelector(), InGraveyard(Feugen())))§
class Stalagg(MinionCard):§    def __init__(self):§        super().__init__("Stalagg", 5, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)§§    def create_minion(self, player):§        return Minion(7, 4, deathrattle=Deathrattle(Summon(Thaddius()), PlayerSelector(), InGraveyard(Feugen())))§
class StoneskinGargoyle(MinionCard):§    def __init__(self):§        super().__init__("Stoneskin Gargoyle", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)§§    def create_minion(self, player):§        return Minion(1, 4, effects=[Effect(TurnStarted(), ActionTag(Heal(10000), SelfSelector()))])§
class Thaddius(MinionCard):§    def __init__(self):§        super().__init__("Thaddius", 10, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, False)§§    def create_minion(self, player):§        return Minion(11, 11)§
class Treant(MinionCard):§    def __init__(self):§        super().__init__("Treant", 1, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON)§§    def create_minion(self, _):§        return Minion(2, 2)§
class Undertaker(MinionCard):§    def __init__(self):§        super().__init__("Undertaker", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)§§    def create_minion(self, player):§        return Minion(1, 2, effects=[Effect(MinionSummoned(MinionHasDeathrattle()), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])§
class UnstableGhoul(MinionCard):§    def __init__(self):§        super().__init__("Unstable Ghoul", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)§§    def create_minion(self, player):§        return Minion(1, 3, deathrattle=Deathrattle(Damage(1), MinionSelector(players=BothPlayer())), taunt=True)§
class Webspinner(MinionCard):§    def __init__(self):§        super().__init__("Webspinner", 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)§§    def create_minion(self, player):§        return Minion(1, 1, deathrattle=Deathrattle(AddCard(CardQuery(conditions=[IsType(MINION_TYPE.BEAST)])), PlayerSelector()))§
class ZombieChow(MinionCard):§    def __init__(self):§        super().__init__("Zombie Chow", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)§§    def create_minion(self, player):§        return Minion(2, 3, deathrattle=Deathrattle(Heal(5), HeroSelector(EnemyPlayer())))§
class Abomination(MinionCard):§    def __init__(self):§        super().__init__("Abomination", 5, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)§§    def create_minion(self, player):§        return Minion(4, 4, deathrattle=Deathrattle(Damage(2), CharacterSelector(players=BothPlayer())), taunt=True)§
class AbusiveSergeant(MinionCard):§    def __init__(self):§        super().__init__("Abusive Sergeant", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Give(BuffUntil(ChangeAttack(2), TurnEnded(player=CurrentPlayer()))), MinionSelector(players=BothPlayer(), picker=UserPicker())))§§    def create_minion(self, player):§        return Minion(2, 1)§
class AcolyteOfPain(MinionCard):§    def __init__(self):§        super().__init__("Acolyte of Pain", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)§§    def create_minion(self, player):§        return Minion(1, 3, effects=[Effect(Damaged(), ActionTag(Draw(), PlayerSelector()))])§
class AlAkirTheWindlord(MinionCard):§    def __init__(self):§        super().__init__("Al'Akir the Windlord", 8, CHARACTER_CLASS.SHAMAN, CARD_RARITY.LEGENDARY)§§    def create_minion(self, player):§        return Minion(3, 5, windfury=True, charge=True, divine_shield=True, taunt=True)§
class AlarmoBot(MinionCard):§    def __init__(self):§        super().__init__("Alarm-o-Bot", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)§§    def create_minion(self, player):§        return Minion(0, 3, effects=[Effect(TurnStarted(), ActionTag(SwapWithHand(), PlayerSelector()))])§
class AldorPeacekeeper(MinionCard):§    def __init__(self):§        super().__init__("Aldor Peacekeeper", 3, CHARACTER_CLASS.PALADIN, CARD_RARITY.RARE, battlecry=Battlecry(Give(SetAttack(1)), MinionSelector(condition=None, players=EnemyPlayer())))§§    def create_minion(self, player):§        return Minion(3, 3)§
class AncestralSpirit(SpellCard):§    def __init__(self):§        super().__init__("Ancestral Spirit", 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.RARE, target_func=hearthbreaker.targeting.find_minion_spell_target)§§    def use(self, player, game):§        super().use(player, game)§        self.target.deathrattle.append(Deathrattle(Summon(self.target.card), PlayerSelector()))§
class AncientBrewmaster(MinionCard):§    def __init__(self):§        super().__init__("Ancient Brewmaster", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Bounce(), MinionSelector(picker=UserPicker())))§§    def create_minion(self, player):§        return Minion(5, 4)§
class AncientMage(MinionCard):§    def __init__(self):§        super().__init__("Ancient Mage", 4, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, battlecry=Battlecry(Give(SpellDamage(1)), MinionSelector(condition=Adjacent())))§§    def create_minion(self, player):§        return Minion(2, 5)§
class AncientWatcher(MinionCard):§    def __init__(self):§        super().__init__("Ancient Watcher", 2, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)§§    def create_minion(self, player):§        return Minion(4, 5, buffs=[Buff(CantAttack())])§
class AncientOfLore(MinionCard):§    def __init__(self):§§        super().__init__("Ancient of Lore", 7, CHARACTER_CLASS.DRUID, CARD_RARITY.EPIC, choices=[§            Choice(AncientSecrets(), Heal(5), HeroSelector()),§            Choice(AncientTeachings(), Draw(3), PlayerSelector())§        ])§§    def create_minion(self, player):§        return Minion(5, 5)§
class AncientOfWar(MinionCard):§    def __init__(self):§§        super().__init__("Ancient of War", 7, CHARACTER_CLASS.DRUID, CARD_RARITY.EPIC, choices=[§            Choice(Health(), Give([Buff(ChangeHealth(5)), Buff(Taunt())]), SelfSelector()),§            Choice(Attack(), Give([Buff(ChangeAttack(5))]), SelfSelector()),§        ])§§    def create_minion(self, player):§        return Minion(5, 5)§
class AngryChicken(MinionCard):§    def __init__(self):§        super().__init__("Angry Chicken", 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, minion_type=MINION_TYPE.BEAST)§§    def create_minion(self, player):§        return Minion(1, 1, enrage=[Aura(ChangeAttack(5), SelfSelector())])§
class ArathiWeaponsmith(MinionCard):§    def __init__(self):§        super().__init__("Arathi Weaponsmith", 4, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON, battlecry=Battlecry(Equip(BattleAxe()), PlayerSelector()))§§    def create_minion(self, player):§        return Minion(3, 3)§
class ArgentCommander(MinionCard):§    def __init__(self):§        super().__init__("Argent Commander", 6, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)§§    def create_minion(self, player):§        return Minion(4, 2, divine_shield=True, charge=True)§
class ArgentProtector(MinionCard):§    def __init__(self):§        super().__init__("Argent Protector", 2, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON, battlecry=Battlecry(Give(DivineShield()), MinionSelector()))§§    def create_minion(self, player):§        return Minion(2, 2)§
class ArgentSquire(MinionCard):§    def __init__(self):§        super().__init__("Argent Squire", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)§§    def create_minion(self, player):§        return Minion(1, 1, divine_shield=True)§
class Armorsmith(MinionCard):§    def __init__(self):§        super().__init__("Armorsmith", 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.RARE)§§    def create_minion(self, player):§        return Minion(1, 4, effects=[Effect(CharacterDamaged(condition=IsMinion()), ActionTag(IncreaseArmor(), HeroSelector()))])§
class Ashbringer(WeaponCard):§    def __init__(self):§        super().__init__("Ashbringer", 5, CHARACTER_CLASS.PALADIN, CARD_RARITY.LEGENDARY, False)§§    def create_weapon(self, player):§        weapon = Weapon(5, 3)§        return weapon§
class AuchenaiSoulpriest(MinionCard):§    def __init__(self):§        super().__init__("Auchenai Soulpriest", 4, CHARACTER_CLASS.PRIEST, CARD_RARITY.RARE)§§    def create_minion(self, player):§        return Minion(3, 5, auras=[Aura(HealAsDamage(), PlayerSelector())])§
class AvengingWrath(SpellCard):§    def __init__(self):§        super().__init__("Avenging Wrath", 6, CHARACTER_CLASS.PALADIN, CARD_RARITY.EPIC)§§    def use(self, player, game):§        super().use(player, game)§        for i in range(0, player.effective_spell_damage(8)):§            targets = copy.copy(game.other_player.minions)§            targets.append(game.other_player.hero)§            target = game.random_choice(targets)§            target.damage(1, self)§
class AzureDrake(MinionCard):§    def __init__(self):§        super().__init__("Azure Drake", 5, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, minion_type=MINION_TYPE.DRAGON, battlecry=Battlecry(Draw(), PlayerSelector()))§§    def create_minion(self, player):§        return Minion(4, 4, spell_damage=1)§
class BaneOfDoom(SpellCard):§    def __init__(self):§        super().__init__("Bane of Doom", 5, CHARACTER_CLASS.WARLOCK, CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.find_spell_target)§§    def use(self, player, game):§        super().use(player, game)§        if self.target.health <= player.effective_spell_damage(2) and  (isinstance(self.target, Minion) and not self.target.divine_shield):§            self.target.damage(player.effective_spell_damage(2), self)§            demons = CardQuery(conditions=[IsType(MINION_TYPE.DEMON)])§            demons.get_card(player, player, self).summon(player, game, len(player.minions))§        else:§            self.target.damage(player.effective_spell_damage(2), self)§
class BaronGeddon(MinionCard):§    def __init__(self):§        super().__init__("Baron Geddon", 7, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)§§    def create_minion(self, player):§        return Minion(7, 5, effects=[Effect(TurnEnded(), ActionTag(Damage(2), CharacterSelector(players=BothPlayer())))])§
class BattleAxe(WeaponCard):§    def __init__(self):§        super().__init__("Battle Axe", 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON, False)§§    def create_weapon(self, player):§        return Weapon(2, 2)§
class BattleRage(SpellCard):§    def __init__(self):§        super().__init__("Battle Rage", 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON)§§    def use(self, player, game):§        def damaged_character(character):§            return character.health < character.calculate_max_health()§§        super().use(player, game)§§        characters = copy.copy(player.minions)§        characters.append(player.hero)§§        characters = [character for character in characters if damaged_character(character)]§§        for i in range(0, len(characters)):§            player.draw()§
class BestialWrath(SpellCard):§    def __init__(self):§        super().__init__("Bestial Wrath", 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.find_friendly_minion_spell_target, filter_func=lambda minion: minion.card.minion_type is MINION_TYPE.BEAST and minion.spell_targetable())§§    def use(self, player, game):§        super().use(player, game)§        self.target.add_buff(BuffUntil(Immune(), TurnEnded(player=CurrentPlayer())))§        self.target.change_temp_attack(2)§
class Betrayal(SpellCard):§    def __init__(self):§        super().__init__("Betrayal", 2, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_enemy_minion_spell_target)§§    def use(self, player, game):§        super().use(player, game)§§        left_minion = None§        right_minion = None§§        index = self.target.index§        if index > 0:§            left_minion = game.other_player.minions[index - 1]§        if index < min(len(game.other_player.minions) - 1, 6):§            right_minion = game.other_player.minions[index + 1]§§        original_immune = self.target.immune§        self.target.immune = True§        if left_minion is not None:§            left_minion.damage(self.target.calculate_attack(), self.target)§        if right_minion is not None:§            right_minion.damage(self.target.calculate_attack(), self.target)§        self.target.immune = original_immune§
class BigGameHunter(MinionCard):§    def __init__(self):§        super().__init__("Big Game Hunter", 3, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, battlecry=Battlecry(Kill(), MinionSelector(AttackGreaterThan(6), BothPlayer())))§§    def create_minion(self, player):§        return Minion(4, 2)§
class Bite(SpellCard):§    def __init__(self):§        super().__init__("Bite", 4, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE)§§    def use(self, player, game):§        super().use(player, game)§        player.hero.change_temp_attack(4)§        player.hero.increase_armor(4)§
class BlessingOfWisdom(SpellCard):§    def __init__(self):§        super().__init__("Blessing of Wisdom", 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)§§    def use(self, player, game):§        super().use(player, game)§        if player is game.players[0]:§            draw_player = PlayerOne()§        else:§            draw_player = PlayerTwo()§        self.target.add_effect(Effect(Attack(), ActionTag(Draw(), PlayerSelector(draw_player))))§
class Blizzard(SpellCard):§    def __init__(self):§        super().__init__("Blizzard", 6, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)§§    def use(self, player, game):§        super().use(player, game)§        for minion in copy.copy(game.other_player.minions):§            minion.damage(player.effective_spell_damage(2), self)§        for minion in game.other_player.minions:§            minion.add_buff(Buff(Frozen()))§
class BloodFury(WeaponCard):§    def __init__(self):§        super().__init__("Blood Fury", 3, CHARACTER_CLASS.WARLOCK, CARD_RARITY.RARE, False)§§    def create_weapon(self, player):§        return Weapon(3, 8)§
class BloodImp(MinionCard):§    def __init__(self):§        super().__init__("Blood Imp", 1, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, minion_type=MINION_TYPE.DEMON)§§    def create_minion(self, player):§        return Minion(0, 1, stealth=True, effects=[Effect(TurnEnded(), ActionTag(Give(ChangeHealth(1)), MinionSelector(picker=RandomPicker())))])§
class BloodKnight(MinionCard):§    def __init__(self):§        super().__init__("Blood Knight", 3, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, battlecry=(Battlecry([Give([Buff(ChangeAttack(Count(MinionSelector(HasDivineShield(), BothPlayer())), 3)), Buff(ChangeHealth(Count(MinionSelector(HasDivineShield(), BothPlayer())), 3))])], SelfSelector()), Battlecry(RemoveDivineShields(), (MinionSelector(HasDivineShield(), BothPlayer())))))§§    def create_minion(self, player):§        return Minion(3, 3)§
class BloodmageThalnos(MinionCard):§    def __init__(self):§        super().__init__("Bloodmage Thalnos", 2, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)§§    def create_minion(self, player):§        return Minion(1, 1, spell_damage=1, deathrattle=Deathrattle(Draw(), PlayerSelector()))§
class BloodsailCorsair(MinionCard):§    def __init__(self):§        super().__init__("Bloodsail Corsair", 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, minion_type=MINION_TYPE.PIRATE, battlecry=Battlecry(DecreaseDurability(), WeaponSelector(EnemyPlayer())))§§    def create_minion(self, player):§        return Minion(1, 2)§
class BloodsailRaider(MinionCard):§    def __init__(self):§        super().__init__("Bloodsail Raider", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.PIRATE, battlecry=Battlecry(Give(Buff(ChangeAttack(Attribute("base_attack", WeaponSelector())))), SelfSelector()))§§    def create_minion(self, player):§        return Minion(2, 3)§
class CairneBloodhoof(MinionCard):§    def __init__(self):§        super().__init__("Cairne Bloodhoof", 6, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)§§    def create_minion(self, player):§        return Minion(4, 5, deathrattle=Deathrattle(Summon(BaineBloodhoof()), PlayerSelector()))§
class CaptainGreenskin(MinionCard):§    def __init__(self):§        super().__init__("Captain Greenskin", 5, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.PIRATE, battlecry=Battlecry([IncreaseWeaponAttack(1), IncreaseDurability()], WeaponSelector()))§§    def create_minion(self, player):§        return Minion(5, 4)§
class Cenarius(MinionCard):§    def __init__(self):§        super().__init__("Cenarius", 9, CHARACTER_CLASS.DRUID, CARD_RARITY.LEGENDARY, choices=[§            Choice(IncreaseStats(), Give([Buff(ChangeAttack(2)), Buff(ChangeHealth(2)), Buff(Taunt())]), MinionSelector()),§            Choice(SummonTreants(), Summon(TauntTreant(), 2), PlayerSelector())§        ])§§    def create_minion(self, player):§        return Minion(5, 8)§
class CircleOfHealing(SpellCard):§    def __init__(self):§        super().__init__("Circle of Healing", 0, CHARACTER_CLASS.PRIEST, CARD_RARITY.COMMON)§§    def use(self, player, game):§        super().use(player, game)§§        targets = copy.copy(game.other_player.minions)§        targets.extend(player.minions)§§        for minion in targets:§            minion.heal(player.effective_heal_power(4), self)§
class ColdBlood(SpellCard):§    def __init__(self):§        super().__init__("Cold Blood", 1, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)§§    def use(self, player, game):§        super().use(player, game)§§        if player.cards_played > 0:§            self.target.change_attack(4)§        else:§            self.target.change_attack(2)§
class ColdlightOracle(MinionCard):§    def __init__(self):§        super().__init__("Coldlight Oracle", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, minion_type=MINION_TYPE.MURLOC, battlecry=Battlecry(Draw(2), PlayerSelector(players=BothPlayer())))§§    def create_minion(self, player):§        return Minion(2, 2)§
class ColdlightSeer(MinionCard):§    def __init__(self):§        super().__init__("Coldlight Seer", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, minion_type=MINION_TYPE.MURLOC, battlecry=Battlecry(Give(ChangeHealth(2)), MinionSelector(IsType(MINION_TYPE.MURLOC), BothPlayer())))§§    def create_minion(self, player):§        return Minion(2, 3)§
class CommandingShout(SpellCard):§    def __init__(self):§        super().__init__("Commanding Shout", 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.RARE)§§    def use(self, player, game):§        super().use(player, game)§        player.add_aura(AuraUntil(MinimumHealth(1), MinionSelector(), TurnEnded()))§§        player.draw()§
class Counterspell(SecretCard):§    def __init__(self):§        super().__init__("Counterspell", 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)§§    def use(self, player, game):§        super().use(player, game)§§    def _reveal(self, card, index):§        if card.is_spell():§            card.cancel = True§            super().reveal()§§    def activate(self, player):§        player.game.current_player.bind("card_played", self._reveal)§§    def deactivate(self, player):§        player.game.current_player.unbind("card_played", self._reveal)§
class CrazedAlchemist(MinionCard):§    def __init__(self):§        super().__init__("Crazed Alchemist", 2, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, battlecry=Battlecry(SwapStats('health', 'attack', False), MinionSelector(players=BothPlayer(), picker=UserPicker())))§§    def create_minion(self, player):§        return Minion(2, 2)§
class CruelTaskmaster(MinionCard):§    def __init__(self):§        super().__init__("Cruel Taskmaster", 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON, battlecry=Battlecry([Damage(1), Give(ChangeAttack(2))], MinionSelector(players=BothPlayer(), picker=UserPicker())))§§    def create_minion(self, player):§        return Minion(2, 2)§
class CultMaster(MinionCard):§    def __init__(self):§        super().__init__("Cult Master", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)§§    def create_minion(self, player):§        return Minion(4, 2, effects=[Effect(MinionDied(), ActionTag(Draw(), PlayerSelector()))])§
class DamagedGolem(MinionCard):§    def __init__(self):§        super().__init__("Damaged Golem", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.MECH)§§    def create_minion(self, player):§        return Minion(2, 1)§
class DarkIronDwarf(MinionCard):§    def __init__(self):§        super().__init__("Dark Iron Dwarf", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Give(BuffUntil(ChangeAttack(2), TurnEnded(player=CurrentPlayer()))), MinionSelector(players=BothPlayer(), picker=UserPicker())))§§    def create_minion(self, player):§        return Minion(4, 4)§
class DeadlyShot(SpellCard):§    def __init__(self):§        super().__init__("Deadly Shot", 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON)§§    def use(self, player, game):§        super().use(player, game)§        targets = hearthbreaker.targeting.find_enemy_minion_battlecry_target(player.game, lambda x: True)§        target = game.random_choice(targets)§        target.die(None)§        game.check_delayed()§§    def can_use(self, player, game):§        return super().can_use(player, game) and len(game.other_player.minions) >= 1§
class Deathwing(MinionCard):§    def __init__(self):§        super().__init__("Deathwing", 10, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DRAGON, battlecry=(Battlecry(Kill(), MinionSelector(players=BothPlayer())), Battlecry(Discard(amount=Count(CardSelector())), PlayerSelector())))§§    def create_minion(self, player):§        return Minion(12, 12)§
class DefiasBandit(MinionCard):§    def __init__(self):§        super().__init__("Defias Bandit", 1, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON, False)§§    def create_minion(self, player):§        return Minion(2, 1)§
class DefiasRingleader(MinionCard):§    def __init__(self):§        super().__init__("Defias Ringleader", 2, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON, combo=Battlecry(Summon(DefiasBandit()), PlayerSelector()))§§    def create_minion(self, player):§        return Minion(2, 2)§
class Demolisher(MinionCard):§    def __init__(self):§        super().__init__("Demolisher", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)§§    def create_minion(self, player):§        return Minion(1, 4, effects=[Effect(TurnStarted(), ActionTag(Damage(2), CharacterSelector(players=EnemyPlayer(), picker=RandomPicker())))])§
class Demonfire(SpellCard):§    def __init__(self):§        super().__init__("Demonfire", 2, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)§§    def use(self, player, game):§        super().use(player, game)§        targets = copy.copy(player.game.current_player.minions)§        if self.target.card.minion_type is MINION_TYPE.DEMON and self.target in targets:§            self.target.change_attack(2)§            self.target.increase_health(2)§        else:§            self.target.damage(player.effective_spell_damage(2), self)§
class Demonfire(SpellCard):§    def __init__(self):§        super().__init__("Demonfire", 2, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)§§    def use(self, player, game):§        super().use(player, game)§        targets = copy.copy(player.game.current_player.minions)§        if self.target.card.minion_type is MINION_TYPE.DEMON and self.target in targets:§            self.target.change_attack(2)§            self.target.increase_health(2)§        else:§            self.target.damage(player.effective_spell_damage(2), self)§
class Devilsaur(MinionCard):§    def __init__(self):§        super().__init__("Devilsaur", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.BEAST)§§    def create_minion(self, player):§        return Minion(5, 5)§
class DireWolfAlpha(MinionCard):§    def __init__(self):§        super().__init__("Dire Wolf Alpha", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)§§    def create_minion(self, player):§        return Minion(2, 2, auras=[Aura(ChangeAttack(1), MinionSelector(Adjacent()))])§
class DivineFavor(SpellCard):§    def __init__(self):§        super().__init__("Divine Favor", 3, CHARACTER_CLASS.PALADIN, CARD_RARITY.RARE)§§    def use(self, player, game):§        super().use(player, game)§        difference = len(game.other_player.hand) - len(player.hand)§        for i in range(0, difference):§            player.draw()§
class Doomsayer(MinionCard):§    def __init__(self):§        super().__init__("Doomsayer", 2, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC)§§    def create_minion(self, player):§        return Minion(0, 7, effects=[Effect(TurnStarted(), ActionTag(Kill(), MinionSelector(condition=None, players=BothPlayer())))])§
class DreadCorsair(MinionCard):§    def __init__(self):§        super().__init__("Dread Corsair", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.PIRATE, buffs=[Buff(ManaChange(Attribute("attack", WeaponSelector()), -1))])§§    def create_minion(self, player):§        return Minion(3, 3, taunt=True)§
class Dream(SpellCard):§    def __init__(self):§        super().__init__("Dream", 0, CHARACTER_CLASS.DREAM, CARD_RARITY.COMMON, False, hearthbreaker.targeting.find_minion_spell_target)§§    def use(self, player, game):§        super().use(player, game)§        self.target.bounce()§
class DruidOfTheClaw(MinionCard):§    def __init__(self):§        super().__init__("Druid of the Claw", 5, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, choices=[§            Choice(CatForm(), Transform(CatDruid()), SelfSelector()),§            Choice(BearForm(), Transform(BearDruid()), SelfSelector())§        ])§§    def create_minion(self, player):§        return Minion(4, 4)§
class DruidOfTheClaw(MinionCard):§    def __init__(self):§        super().__init__("Druid of the Claw", 5, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, choices=[§            Choice(CatForm(), Transform(CatDruid()), SelfSelector()),§            Choice(BearForm(), Transform(BearDruid()), SelfSelector())§        ])§§    def create_minion(self, player):§        return Minion(4, 4)§
class DruidOfTheClaw(MinionCard):§    def __init__(self):§        super().__init__("Druid of the Claw", 5, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, choices=[§            Choice(CatForm(), Transform(CatDruid()), SelfSelector()),§            Choice(BearForm(), Transform(BearDruid()), SelfSelector())§        ])§§    def create_minion(self, player):§        return Minion(4, 4)§
class DustDevil(MinionCard):§    def __init__(self):§        super().__init__("Dust Devil", 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON, overload=2)§§    def create_minion(self, player):§        return Minion(3, 1, windfury=True)§
class EaglehornBow(WeaponCard):§    def __init__(self):§        super().__init__("Eaglehorn Bow", 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)§§    def create_weapon(self, player):§        return Weapon(3, 2, effects=[Effect(SecretRevealed(), ActionTag(IncreaseDurability(), WeaponSelector()))])§
class EarthenRingFarseer(MinionCard):§    def __init__(self):§        super().__init__("Earthen Ring Farseer", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Heal(3), CharacterSelector(players=BothPlayer(), picker=UserPicker())))§§    def create_minion(self, player):§        return Minion(3, 3)§
class EdwinVanCleef(MinionCard):§    def __init__(self):§        super().__init__("Edwin VanCleef", 3, CHARACTER_CLASS.ROGUE, CARD_RARITY.LEGENDARY, battlecry=Battlecry(Give([Buff(ChangeAttack(Attribute("cards_played", PlayerSelector()), 2)), Buff(ChangeHealth(Attribute("cards_played", PlayerSelector()), 2))]), SelfSelector()))§§    def create_minion(self, player):§        return Minion(2, 2)§
class EmeraldDrake(MinionCard):§    def __init__(self):§        super().__init__("Emerald Drake", 4, CHARACTER_CLASS.DREAM, CARD_RARITY.COMMON, False, MINION_TYPE.DRAGON)§§    def create_minion(self, player):§        return Minion(7, 6)§
class EmperorCobra(MinionCard):§    def __init__(self):§        super().__init__("Emperor Cobra", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, minion_type=MINION_TYPE.BEAST)§§    def create_minion(self, player):§        return Minion(2, 3, effects=[Effect(DidDamage(), ActionTag(Kill(), TargetSelector(IsMinion())))])§
class Equality(SpellCard):§    def __init__(self):§        super().__init__("Equality", 2, CHARACTER_CLASS.PALADIN, CARD_RARITY.RARE)§§    def use(self, player, game):§        super().use(player, game)§§        targets = copy.copy(game.other_player.minions)§        targets.extend(player.minions)§§        for minion in targets:§            minion.set_health_to(1)§§    def can_use(self, player, game):§        return super().can_use(player, game) and (len(player.minions) > 0 or len(game.other_player.minions) > 0)§
class EtherealArcanist(MinionCard):§    def __init__(self):§        super().__init__("Ethereal Arcanist", 4, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)§§    def create_minion(self, player):§        return Minion(3, 3, effects=[Effect(TurnEnded(HasSecret()), ActionTag(Give(ChangeAttack(2)), SelfSelector())), Effect(TurnEnded(HasSecret()), ActionTag(Give(ChangeHealth(2)), SelfSelector()))])§
class Eviscerate(SpellCard):§    def __init__(self):§        super().__init__("Eviscerate", 2, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_spell_target)§§    def use(self, player, game):§        super().use(player, game)§§        if player.cards_played > 0:§            self.target.damage(player.effective_spell_damage(4), self)§        else:§            self.target.damage(player.effective_spell_damage(2), self)§
class ExplosiveShot(SpellCard):§    def __init__(self):§        super().__init__("Explosive Shot", 5, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE, target_func=hearthbreaker.targeting.find_minion_spell_target)§§    def use(self, player, game):§        super().use(player, game)§§        index = self.target.index§        if self.target.index < len(self.target.player.minions) - 1:§            minion = self.target.player.minions[index + 1]§            minion.damage(player.effective_spell_damage(2), self)§§        self.target.damage(player.effective_spell_damage(5), self)§§        if self.target.index > 0:§            minion = self.target.player.minions[index - 1]§            minion.damage(player.effective_spell_damage(2), self)§
class FacelessManipulator(MinionCard):§    def __init__(self):§        super().__init__("Faceless Manipulator", 5, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, battlecry=Battlecry(Replace(), MinionSelector(players=BothPlayer(), picker=UserPicker())))§§    def create_minion(self, player):§        return Minion(3, 3)§
class FaerieDragon(MinionCard):§    def __init__(self):§        super().__init__("Faerie Dragon", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON)§§    def create_minion(self, player):§        return Minion(3, 2, spell_targetable=False)§
class FarSight(SpellCard):§    def __init__(self):§        super().__init__("Far Sight", 3, CHARACTER_CLASS.SHAMAN, CARD_RARITY.EPIC)§§    def use(self, player, game):§        def reduce_cost(card):§            card.add_buff(Buff(ManaChange(-3)))§§        super().use(player, game)§        player.bind_once("card_drawn", reduce_cost)§        player.draw()§
class Felguard(MinionCard):§    def __init__(self):§        super().__init__("Felguard", 3, CHARACTER_CLASS.WARLOCK, CARD_RARITY.RARE, minion_type=MINION_TYPE.DEMON, battlecry=Battlecry(DestroyManaCrystal(), PlayerSelector()))§§    def create_minion(self, player):§        return Minion(3, 5, taunt=True)§
class FenCreeper(MinionCard):§    def __init__(self):§        super().__init__("Fen Creeper", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)§§    def create_minion(self, player):§        return Minion(3, 6, taunt=True)§
class FeralSpirit(SpellCard):§    def __init__(self):§        super().__init__("Feral Spirit", 3, CHARACTER_CLASS.SHAMAN, CARD_RARITY.RARE, overload=2)§§    def use(self, player, game):§        super().use(player, game)§§        for i in range(0, 2):§            spirit_wolf = hearthbreaker.cards.minions.shaman.SpiritWolf()§            spirit_wolf.summon(player, game, len(player.minions))§§    def can_use(self, player, game):§        return super().can_use(player, game) and len(player.minions) < 7§
class FinkleEinhorn(MinionCard):§    def __init__(self):§        super().__init__("Finkle Einhorn", 2, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, False)§§    def create_minion(self, player):§        return Minion(3, 3)§
class FlameImp(MinionCard):§    def __init__(self):§        super().__init__("Flame Imp", 1, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, minion_type=MINION_TYPE.DEMON, battlecry=Battlecry(Damage(3), HeroSelector()))§§    def create_minion(self, player):§        return Minion(3, 2)§
class FlesheatingGhoul(MinionCard):§    def __init__(self):§        super().__init__("Flesheating Ghoul", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)§§    def create_minion(self, player):§        return Minion(2, 3, effects=[Effect(MinionDied(player=BothPlayer()), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])§
class ForceOfNature(SpellCard):§    def __init__(self):§        super().__init__("Force of Nature", 6, CHARACTER_CLASS.DRUID, CARD_RARITY.EPIC)§§    def use(self, player, game):§        super().use(player, game)§        from hearthbreaker.cards.minions.druid import ChargeTreant§        for i in [0, 1, 2]:§            treant_card = ChargeTreant()§            treant_card.summon(player, game, len(player.minions))§§    def can_use(self, player, game):§        return super().can_use(player, game) and len(player.minions) < 7§
class ForkedLightning(SpellCard):§    def __init__(self):§        super().__init__("Forked Lightning", 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON, overload=2)§§    def use(self, player, game):§        super().use(player, game)§§        minions = copy.copy(game.other_player.minions)§        for i in range(0, 2):§            minion = game.random_choice(minions)§            minions.remove(minion)§            minion.damage(player.effective_spell_damage(3), self)§§    def can_use(self, player, game):§        return super().can_use(player, game) and len(game.other_player.minions) >= 2§
class FreezingTrap(SecretCard):§    def __init__(self):§        super().__init__("Freezing Trap", 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON)§§    def activate(self, player):§        player.game.current_player.bind("character_attack", self._reveal)§§    def deactivate(self, player):§        player.game.current_player.unbind("character_attack", self._reveal)§§    def _reveal(self, attacker, target):§        if isinstance(attacker, Minion) and not attacker.removed:§            attacker.bounce()§            attacker.card.add_buff(Buff(ManaChange(2)))§            super().reveal()§
class FrostElemental(MinionCard):§    def __init__(self):§        super().__init__("Frost Elemental", 6, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Give(Frozen()), CharacterSelector(players=BothPlayer(), picker=UserPicker())))§§    def create_minion(self, player):§        return Minion(5, 5)§
class FrothingBerserker(MinionCard):§    def __init__(self):§        super().__init__("Frothing Berserker", 3, CHARACTER_CLASS.WARRIOR, CARD_RARITY.RARE)§§    def create_minion(self, player):§        return Minion(2, 4, effects=[Effect(CharacterDamaged(player=BothPlayer(), condition=IsMinion()), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])§
class GadgetzanAuctioneer(MinionCard):§    def __init__(self):§        super().__init__("Gadgetzan Auctioneer", 6, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)§§    def create_minion(self, player):§        return Minion(4, 4, effects=[Effect(SpellCast(), ActionTag(Draw(), PlayerSelector()))])§
class GladiatorsLongbow(WeaponCard):§    def __init__(self):§        super().__init__("Gladiator's Longbow", 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.EPIC)§§    def create_weapon(self, player):§        return Weapon(5, 2, effects=[Effect(CharacterAttack(IsHero()), ActionTag(Give(BuffUntil(Immune(), AttackCompleted())), HeroSelector()))])§
class GrommashHellscream(MinionCard):§    def __init__(self):§        super().__init__("Grommash Hellscream", 8, CHARACTER_CLASS.WARRIOR, CARD_RARITY.LEGENDARY)§§    def create_minion(self, player):§        return Minion(4, 9, charge=True, enrage=[Aura(ChangeAttack(6), SelfSelector())])§
class Gruul(MinionCard):§    def __init__(self):§        super().__init__("Gruul", 8, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)§§    def create_minion(self, player):§        return Minion(7, 7, effects=[Effect(TurnEnded(player=BothPlayer()), ActionTag(Give([Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]), SelfSelector()))])§
class HarrisonJones(MinionCard):§    def __init__(self):§        super().__init__("Harrison Jones", 5, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, battlecry=(Battlecry(Draw(Attribute("durability", WeaponSelector(EnemyPlayer()))), PlayerSelector()), Battlecry(Destroy(), WeaponSelector(EnemyPlayer()))))§§    def create_minion(self, player):§        return Minion(5, 4)§
class HarvestGolem(MinionCard):§    def __init__(self):§        super().__init__("Harvest Golem", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)§§    def create_minion(self, player):§        return Minion(2, 3, deathrattle=Deathrattle(Summon(DamagedGolem()), PlayerSelector()))§
class Headcrack(SpellCard):§    def __init__(self):§        super().__init__("Headcrack", 3, CHARACTER_CLASS.ROGUE, CARD_RARITY.RARE)§§    def use(self, player, game):§        super().use(player, game)§        game.other_player.hero.damage(player.effective_spell_damage(2), self)§        if player.cards_played > 0:§            player.add_effect(Effect(TurnEnded(), ActionTag(AddCard(self), PlayerSelector())))§
class HeavyAxe(WeaponCard):§    def __init__(self):§        super().__init__("Heavy Axe", 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON, False)§§    def create_weapon(self, player):§        return Weapon(1, 3)§
class Hogger(MinionCard):§    def __init__(self):§        super().__init__("Hogger", 6, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)§§    def create_minion(self, player):§        return Minion(4, 4, effects=[Effect(TurnEnded(), ActionTag(Summon(Gnoll()), PlayerSelector()))])§
class HolyFire(SpellCard):§    def __init__(self):§        super().__init__("Holy Fire", 6, CHARACTER_CLASS.PRIEST, CARD_RARITY.RARE, target_func=hearthbreaker.targeting.find_minion_spell_target)§§    def use(self, player, game):§        super().use(player, game)§§        self.target.damage(player.effective_spell_damage(5), self)§        player.hero.heal(player.effective_heal_power(5), self)§
class HungryCrab(MinionCard):§    def __init__(self):§        super().__init__("Hungry Crab", 1, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, minion_type=MINION_TYPE.BEAST, battlecry=(Battlecry(Kill(), MinionSelector(IsType(MINION_TYPE.MURLOC), BothPlayer())), Battlecry(Give([Buff(ChangeAttack(2)), Buff(ChangeHealth(2))]), SelfSelector())))§§    def create_minion(self, player):§        return Minion(1, 2)§
class Hyena(MinionCard):§    def __init__(self):§        super().__init__("Hyena", 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE, False, minion_type=MINION_TYPE.BEAST)§§    def create_minion(self, player):§        return Minion(2, 2)§
class IceBarrier(SecretCard):§    def __init__(self):§        super().__init__("Ice Barrier", 3, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON)§§    def _reveal(self, attacker, target):§        if target is self.player.hero and not attacker.removed:§            attacker.player.game.other_player.hero.armor += 8§            super().reveal()§§    def activate(self, player):§        player.opponent.bind("character_attack", self._reveal)§§    def deactivate(self, player):§        player.opponent.unbind("character_attack", self._reveal)§
class IceBlock(SecretCard):§    def __init__(self):§        super().__init__("Ice Block", 3, CHARACTER_CLASS.MAGE, CARD_RARITY.EPIC)§        self.player = None§§    def _reveal(self, character, attacker, amount):§        if character.is_hero():§            if character.health - amount <= 0:§                character.add_buff(BuffUntil(Immune(), TurnEnded(player=CurrentPlayer())))§                super().reveal()§§    def activate(self, player):§        player.bind("pre_damage", self._reveal)§§    def deactivate(self, player):§        player.unbind("pre_damage", self._reveal)§
class IceLance(SpellCard):§    def __init__(self):§        super().__init__("Ice Lance", 1, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_spell_target)§§    def use(self, player, game):§        super().use(player, game)§        if self.target.frozen:§            self.target.damage(4, self)§        else:§            self.target.add_buff(Buff(Frozen()))§
class IllidanStormrage(MinionCard):§    def __init__(self):§        super().__init__("Illidan Stormrage", 6, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DEMON)§§    def create_minion(self, player):§        return Minion(7, 5, effects=[Effect(CardPlayed(), ActionTag(Summon(FlameOfAzzinoth()), PlayerSelector()))])§
class Imp(MinionCard):§    def __init__(self):§        super().__init__("Imp", 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, False, minion_type=MINION_TYPE.DEMON)§§    def create_minion(self, player):§        return Minion(1, 1)§
class ImpMaster(MinionCard):§    def __init__(self):§        super().__init__("Imp Master", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)§§    def create_minion(self, player):§        return Minion(1, 5, effects=[Effect(TurnEnded(), ActionTag(Damage(1), SelfSelector())), Effect(TurnEnded(), ActionTag(Summon(Imp()), PlayerSelector()))])§
class InnerFire(SpellCard):§    def __init__(self):§        super().__init__("Inner Fire", 1, CHARACTER_CLASS.PRIEST, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)§§    def use(self, player, game):§        super().use(player, game)§§        delta = self.target.health - self.target.calculate_attack()§        self.target.change_attack(delta)§
class InnerRage(SpellCard):§    def __init__(self):§        super().__init__("Inner Rage", 0, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)§§    def use(self, player, game):§        super().use(player, game)§        self.target.damage(1, self)§        self.target.change_attack(2)§
class IronbeakOwl(MinionCard):§    def __init__(self):§        super().__init__("Ironbeak Owl", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST, battlecry=Battlecry(Silence(), MinionSelector(players=BothPlayer(), picker=UserPicker())))§§    def create_minion(self, player):§        return Minion(2, 1)§
class JunglePanther(MinionCard):§    def __init__(self):§        super().__init__("Jungle Panther", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)§§    def create_minion(self, player):§        return Minion(4, 2, stealth=True)§
class KeeperOfTheGrove(MinionCard):§    def __init__(self):§        super().__init__("Keeper of the Grove", 4, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE, choices=[§            Choice(Moonfire(), Damage(2), CharacterSelector(players=BothPlayer(), picker=UserPicker())),§            Choice(Dispel(), Silence(), MinionSelector(players=BothPlayer(), picker=UserPicker()))§        ])§§    def create_minion(self, player):§        return Minion(2, 4)§
class Kidnapper(MinionCard):§    def __init__(self):§        super().__init__("Kidnapper", 6, CHARACTER_CLASS.ROGUE, CARD_RARITY.EPIC, combo=Battlecry(Bounce(), MinionSelector(picker=UserPicker(), players=BothPlayer())))§§    def create_minion(self, player):§        return Minion(5, 3)§
class KingKrush(MinionCard):§    def __init__(self):§        super().__init__("King Krush", 9, CHARACTER_CLASS.HUNTER, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.BEAST)§§    def create_minion(self, player):§        return Minion(8, 8, charge=True)§
class KingMukla(MinionCard):§    def __init__(self):§        super().__init__("King Mukla", 3, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.BEAST, battlecry=Battlecry(AddCard(Bananas(), 2), PlayerSelector(EnemyPlayer())))§§    def create_minion(self, player):§        return Minion(5, 5)§
class LaughingSister(MinionCard):§    def __init__(self):§        super().__init__("Laughing Sister", 3, CHARACTER_CLASS.DREAM, CARD_RARITY.COMMON, False)§§    def create_minion(self, player):§        return Minion(3, 5, spell_targetable=False)§
class LavaBurst(SpellCard):§    def __init__(self):§        super().__init__("Lava Burst", 3, CHARACTER_CLASS.SHAMAN, CARD_RARITY.RARE, target_func=hearthbreaker.targeting.find_spell_target, overload=2)§§    def use(self, player, game):§        super().use(player, game)§§        self.target.damage(player.effective_spell_damage(5), self)§
class LayOnHands(SpellCard):§    def __init__(self):§        super().__init__("Lay on Hands", 8, CHARACTER_CLASS.PALADIN, CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.find_spell_target)§§    def use(self, player, game):§        super().use(player, game)§§        self.target.heal(player.effective_heal_power(8), self)§        player.draw()§        player.draw()§        player.draw()§
class LeeroyJenkins(MinionCard):§    def __init__(self):§        super().__init__("Leeroy Jenkins", 5, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, battlecry=Battlecry(Summon(Whelp(), 2), PlayerSelector(players=EnemyPlayer())))§§    def create_minion(self, player):§        return Minion(6, 2, charge=True)§
class LeperGnome(MinionCard):§    def __init__(self):§        super().__init__("Leper Gnome", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)§§    def create_minion(self, player):§        return Minion(2, 1, deathrattle=Deathrattle(Damage(2), HeroSelector(EnemyPlayer())))§
class LightningBolt(SpellCard):§    def __init__(self):§        super().__init__("Lightning Bolt", 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_spell_target, overload=1)§§    def use(self, player, game):§        super().use(player, game)§§        self.target.damage(player.effective_spell_damage(3), self)§
class LightningStorm(SpellCard):§    def __init__(self):§        super().__init__("Lightning Storm", 3, CHARACTER_CLASS.SHAMAN, CARD_RARITY.RARE, overload=2)§§    def use(self, player, game):§        super().use(player, game)§§        for minion in copy.copy(game.other_player.minions):§            minion.damage(player.effective_spell_damage(game.random_amount(2, 3)), self)§
class Lightspawn(MinionCard):§    def __init__(self):§        super().__init__("Lightspawn", 4, CHARACTER_CLASS.PRIEST, CARD_RARITY.COMMON)§§    def create_minion(self, player):§        return Minion(0, 5, buffs=[Buff(AttackEqualsHealth())])§
class LootHoarder(MinionCard):§    def __init__(self):§        super().__init__("Loot Hoarder", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)§§    def create_minion(self, player):§        return Minion(2, 1, deathrattle=Deathrattle(Draw(), PlayerSelector()))§
class LordJaraxxus(MinionCard):§    def __init__(self):§        super().__init__("Lord Jaraxxus", 9, CHARACTER_CLASS.WARLOCK, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DEMON, battlecry=(Battlecry(ReplaceHeroWithMinion(Jaraxxus()), HeroSelector()), Battlecry(Remove(), SelfSelector()), Battlecry(Equip(BloodFury()), PlayerSelector())))§§    def create_minion(self, player):§        return Minion(3, 15)§
class LordJaraxxus(MinionCard):§    def __init__(self):§        super().__init__("Lord Jaraxxus", 9, CHARACTER_CLASS.WARLOCK, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DEMON, battlecry=(Battlecry(ReplaceHeroWithMinion(Jaraxxus()), HeroSelector()), Battlecry(Remove(), SelfSelector()), Battlecry(Equip(BloodFury()), PlayerSelector())))§§    def create_minion(self, player):§        return Minion(3, 15)§
class LorewalkerCho(MinionCard):§    def __init__(self):§        super().__init__("Lorewalker Cho", 2, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)§§    def create_minion(self, player):§        return Minion(0, 4, effects=[Effect(SpellCast(player=BothPlayer()), ActionTag(AddCard(CardQuery(source=CARD_SOURCE.LAST_CARD)), PlayerSelector(OtherPlayer())))])§
class MadBomber(MinionCard):§    def __init__(self):§        super().__init__("Mad Bomber", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Damage(1), CharacterSelector(players=BothPlayer(), picker=RandomPicker(3))))§§    def create_minion(self, player):§        return Minion(3, 2)§
class Malygos(MinionCard):§    def __init__(self):§        super().__init__("Malygos", 9, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DRAGON)§§    def create_minion(self, player):§        return Minion(4, 12, spell_damage=5)§
class ManaAddict(MinionCard):§    def __init__(self):§        super().__init__("Mana Addict", 2, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)§§    def create_minion(self, player):§        return Minion(1, 3, effects=[Effect(SpellCast(), ActionTag(Give(BuffUntil(ChangeAttack(2), TurnEnded())), SelfSelector()))])§
class ManaTideTotem(MinionCard):§    def __init__(self):§        super().__init__("Mana Tide Totem", 3, CHARACTER_CLASS.SHAMAN, CARD_RARITY.RARE, minion_type=MINION_TYPE.TOTEM)§§    def create_minion(self, player):§        return Minion(0, 3, effects=[Effect(TurnEnded(), ActionTag(Draw(), PlayerSelector()))])§
class MarkOfNature(SpellCard):§    def __init__(self):§        super().__init__("Mark of Nature", 3, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)§§    def use(self, player, game):§        class MarkOfNatureAttack(ChoiceCard):§            def __init__(self):§                super().__init__("Mark of Nature +4 Attack", 0, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.find_minion_spell_target)§§            def use(self, player, game):§                target.change_attack(4)§§        class MarkOfNatureHealth(ChoiceCard):§            def __init__(self):§                super().__init__("Mark of Nature +4 Health", 0, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.find_minion_spell_target)§§            def use(self, player, game):§                target.increase_health(4)§                target.taunt = True§§        super().use(player, game)§        target = self.target§        option = game.current_player.agent.choose_option([MarkOfNatureAttack(), MarkOfNatureHealth()], player)§        option.use(player, game)§
class MassDispel(SpellCard):§    def __init__(self):§        super().__init__("Mass Dispel", 4, CHARACTER_CLASS.PRIEST, CARD_RARITY.RARE)§§    def use(self, player, game):§        super().use(player, game)§§        for minion in game.other_player.minions:§            minion.silence()§§        player.draw()§
class MasterSwordsmith(MinionCard):§    def __init__(self):§        super().__init__("Master Swordsmith", 2, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)§§    def create_minion(self, player):§        return Minion(1, 3, effects=[Effect(TurnEnded(), ActionTag(Give(ChangeAttack(1)), MinionSelector(picker=RandomPicker())))])§
class MasterOfDisguise(MinionCard):§    def __init__(self):§        super().__init__("Master of Disguise", 4, CHARACTER_CLASS.ROGUE, CARD_RARITY.RARE, battlecry=Battlecry(Give(Stealth()), MinionSelector(picker=UserPicker())))§§    def create_minion(self, player):§        return Minion(4, 4)§
class MillhouseManastorm(MinionCard):§    def __init__(self):§        super().__init__("Millhouse Manastorm", 2, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, battlecry=Battlecry(GiveAura(AuraUntil(ManaChange(-100), CardSelector(condition=IsSpell()), TurnEnded())), PlayerSelector(players=EnemyPlayer())))§§    def create_minion(self, player):§        return Minion(4, 4)§
class MindControlTech(MinionCard):§    def __init__(self):§        super().__init__("Mind Control Tech", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, battlecry=Battlecry(Steal(), MinionSelector(players=EnemyPlayer(), condition=None, picker=RandomPicker()), OpponentMinionCountIsGreaterThan(3)) )§§    def create_minion(self, player):§        return Minion(3, 3)§
class Mindgames(SpellCard):§    def __init__(self):§        super().__init__("Mindgames", 4, CHARACTER_CLASS.PRIEST, CARD_RARITY.EPIC)§§    def use(self, player, game):§        super().use(player, game)§§        minion_card = game.random_draw(game.other_player.deck.cards, lambda c: not c.drawn and isinstance(c, MinionCard))§        if not minion_card:§            minion_card = ShadowOfNothing()§        else:§            minion_card = copy.copy(minion_card)§        minion_card.drawn = True§        minion_card.summon(player, game, 0)§§    def can_use(self, player, game):§        return super().can_use(player, game) and len(player.minions) < 7§
class MirrorEntity(SecretCard):§    def __init__(self):§        super().__init__("Mirror Entity", 3, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON)§        self.player = None§§    def _reveal(self, minion):§        if len(self.player.minions) < 7:§            mirror = minion.copy(self.player)§            mirror.add_to_board(len(self.player.minions))§            minion.player.trigger("minion_summoned", mirror)§            minion.player.trigger("after_added", mirror)§            super().reveal()§§    def activate(self, player):§        player.game.current_player.bind("minion_played", self._reveal)§        self.player = player§§    def deactivate(self, player):§        player.game.current_player.unbind("minion_played", self._reveal)§        self.player = None§
class MoltenGiant(MinionCard):§    def __init__(self):§        super().__init__("Molten Giant", 20, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, buffs=[Buff(ManaChange(Attribute("damage", HeroSelector()), -1))])§§    def create_minion(self, player):§        return Minion(8, 8)§
class MortalStrike(SpellCard):§    def __init__(self):§        super().__init__("Mortal Strike", 4, CHARACTER_CLASS.WARRIOR, CARD_RARITY.RARE, target_func=hearthbreaker.targeting.find_spell_target)§§    def use(self, player, game):§        super().use(player, game)§        if player.hero.health <= 12:§            self.target.damage(player.effective_spell_damage(6), self)§        else:§            self.target.damage(player.effective_spell_damage(4), self)§
class MountainGiant(MinionCard):§    def __init__(self):§        super().__init__("Mountain Giant", 12, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, buffs=[Buff(ManaChange(Count(CardSelector()), -1))])§§    def create_minion(self, player):§        return Minion(8, 8)§
class MurlocTidecaller(MinionCard):§    def __init__(self):§        super().__init__("Murloc Tidecaller", 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, minion_type=MINION_TYPE.MURLOC)§§    def create_minion(self, player):§        return Minion(1, 2, effects=[(Effect(MinionSummoned(IsType(MINION_TYPE.MURLOC), player=BothPlayer()), ActionTag(Give(ChangeAttack(1)), SelfSelector())))])§
class MurlocWarleader(MinionCard):§    def __init__(self):§        super().__init__("Murloc Warleader", 3, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, minion_type=MINION_TYPE.MURLOC)§§    def create_minion(self, player):§        return Minion(3, 3, auras=[Aura(ChangeAttack(2), MinionSelector(IsType(MINION_TYPE.MURLOC), BothPlayer())), Aura(ChangeHealth(1), MinionSelector(IsType(MINION_TYPE.MURLOC), BothPlayer()))])§
class NatPagle(MinionCard):§    def __init__(self):§        super().__init__("Nat Pagle", 2, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)§§    def create_minion(self, player):§        return Minion(0, 4, effects=[Effect(TurnStarted(), ActionTag(Draw(), PlayerSelector(), OneIn(2)))])§
class Naturalize(SpellCard):§    def __init__(self):§        super().__init__("Naturalize", 1, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)§§    def use(self, player, game):§        super().use(player, game)§        self.target.die(self)§        game.other_player.draw()§        game.other_player.draw()§
class Nightmare(SpellCard):§    def __init__(self):§        super().__init__("Nightmare", 0, CHARACTER_CLASS.DREAM, CARD_RARITY.COMMON, False, hearthbreaker.targeting.find_minion_spell_target)§§    def use(self, player, game):§        super().use(player, game)§        self.target.add_buff(Buff(ChangeAttack(5)))§        self.target.add_buff(Buff(ChangeHealth(5)))§        self.target.add_effect(Effect(TurnStarted(player=CurrentPlayer()), ActionTag(Kill(), SelfSelector())))§
class Nozdormu(MinionCard):§    def __init__(self):§        super().__init__("Nozdormu", 9, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DRAGON)§§    def create_minion(self, player):§        return Minion(8, 8)§
class Onyxia(MinionCard):§    def __init__(self):§        super().__init__("Onyxia", 9, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DRAGON, battlecry=Battlecry(Summon(Whelp(), 6), PlayerSelector()))§§    def create_minion(self, player):§        return Minion(8, 8)§
class Panther(MinionCard):§    def __init__(self):§        super().__init__("Panther", 2, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, False, MINION_TYPE.BEAST)§§    def create_minion(self, _):§        return Minion(3, 2, MINION_TYPE.BEAST)§
class PatientAssassin(MinionCard):§    def __init__(self):§        super().__init__("Patient Assassin", 2, CHARACTER_CLASS.ROGUE, CARD_RARITY.EPIC)§§    def create_minion(self, player):§        return Minion(1, 1, stealth=True, effects=[Effect(DidDamage(), ActionTag(Kill(), TargetSelector(IsMinion())))])§
class PerditionsBlade(WeaponCard):§    def __init__(self):§        super().__init__("Perdition's Blade", 3, CHARACTER_CLASS.ROGUE, CARD_RARITY.RARE, battlecry=Battlecry(Damage(1), CharacterSelector(None, picker=UserPicker())), combo=Battlecry(Damage(2), CharacterSelector(None, picker=UserPicker())))§§    def create_weapon(self, player):§        return Weapon(2, 2)§
class PintSizedSummoner(MinionCard):§    def __init__(self):§        super().__init__("Pint-Sized Summoner", 2, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)§§    def create_minion(self, player):§        return Minion(2, 2, effects=[Effect(TurnStarted(), ActionTag(GiveAura(AuraUntil(ManaChange(-1), CardSelector( condition=IsMinion()), MinionPlaced())), PlayerSelector()))])§
class PitLord(MinionCard):§    def __init__(self):§        super().__init__("Pit Lord", 4, CHARACTER_CLASS.WARLOCK, CARD_RARITY.EPIC, minion_type=MINION_TYPE.DEMON, battlecry=Battlecry(Damage(5), HeroSelector()))§§    def create_minion(self, player):§        return Minion(5, 6)§
class PowerOverwhelming(SpellCard):§    def __init__(self):§        super().__init__("Power Overwhelming", 1, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_friendly_minion_spell_target)§§    def use(self, player, game):§        super().use(player, game)§§        self.target.add_effect(Effect(TurnEnded(), ActionTag(Kill(), SelfSelector())))§        self.target.change_attack(4)§        self.target.increase_health(4)§
class PriestessOfElune(MinionCard):§    def __init__(self):§        super().__init__("Priestess of Elune", 6, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Heal(4), HeroSelector()))§§    def create_minion(self, player):§        return Minion(5, 4)§
class ProphetVelen(MinionCard):§    def __init__(self):§        super().__init__("Prophet Velen", 7, CHARACTER_CLASS.PRIEST, CARD_RARITY.LEGENDARY)§§    def create_minion(self, player):§        return Minion(7, 7, auras=[Aura(MultiplySpellDamage(2), PlayerSelector()), Aura(MultiplyHealAmount(2), PlayerSelector())])§
class Pyroblast(SpellCard):§    def __init__(self):§        super().__init__("Pyroblast", 10, CHARACTER_CLASS.MAGE, CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.find_spell_target)§§    def use(self, player, game):§        super().use(player, game)§        self.target.damage(player.effective_spell_damage(10), self)§
class QuestingAdventurer(MinionCard):§    def __init__(self):§        super().__init__("Questing Adventurer", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)§§    def create_minion(self, player):§        return Minion(2, 2, effects=[Effect(CardPlayed(), ActionTag(Give([Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]), SelfSelector()))])§
class RagingWorgen(MinionCard):§    def __init__(self):§        super().__init__("Raging Worgen", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)§§    def create_minion(self, player):§        return Minion(3, 3, enrage=[Aura(ChangeAttack(1), SelfSelector()), Aura(Windfury(), SelfSelector())])§
class RagnarosTheFirelord(MinionCard):§    def __init__(self):§        super().__init__("Ragnaros the Firelord", 8, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)§§    def create_minion(self, player):§        return Minion(8, 8, effects=[Effect(TurnEnded(), ActionTag(Damage(8), CharacterSelector(players=EnemyPlayer(), picker=RandomPicker())))], buffs=[Buff(CantAttack())])§
class Rampage(SpellCard):§    def __init__(self):§        super().__init__("Rampage", 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target, filter_func=lambda target: target.health != target.calculate_max_health() and target.spell_targetable())§§    def use(self, player, game):§        super().use(player, game)§        self.target.change_attack(3)§        self.target.increase_health(3)§
class RavenholdtAssassin(MinionCard):§    def __init__(self):§        super().__init__("Ravenholdt Assassin", 7, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)§§    def create_minion(self, player):§        return Minion(7, 5, stealth=True)§
class SI7Agent(MinionCard):§    def __init__(self):§        super().__init__("SI:7 Agent", 3, CHARACTER_CLASS.ROGUE, CARD_RARITY.RARE, combo=Battlecry(Damage(2), CharacterSelector( players=BothPlayer(), picker=UserPicker()) ))§§    def create_minion(self, player):§        return Minion(3, 3)§
class Savagery(SpellCard):§    def __init__(self):§        super().__init__("Savagery", 1, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE, target_func=hearthbreaker.targeting.find_minion_spell_target)§§    def use(self, player, game):§        super().use(player, game)§        self.target.damage(player.effective_spell_damage(player.hero.calculate_attack()), self)§
class SavannahHighmane(MinionCard):§    def __init__(self):§        super().__init__("Savannah Highmane", 6, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE, minion_type=MINION_TYPE.BEAST)§§    def create_minion(self, player):§        return Minion(6, 5, deathrattle=Deathrattle(Summon(Hyena(), 2), PlayerSelector()))§
class ScarletCrusader(MinionCard):§    def __init__(self):§        super().__init__("Scarlet Crusader", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)§§    def create_minion(self, player):§        return Minion(3, 1, divine_shield=True)§
class ScavengingHyena(MinionCard):§    def __init__(self):§        super().__init__("Scavenging Hyena", 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)§§    def create_minion(self, player):§        return Minion(2, 2, effects=[Effect(MinionDied(IsType(MINION_TYPE.BEAST)), ActionTag(Give(ChangeAttack(2)), SelfSelector())), Effect(MinionDied(IsType(MINION_TYPE.BEAST)), ActionTag(Give(ChangeHealth(1)), SelfSelector()))])§
class SeaGiant(MinionCard):§    def __init__(self):§        super().__init__("Sea Giant", 10, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, buffs=[Buff(ManaChange(Count(MinionSelector(None, BothPlayer())), -1))])§§    def create_minion(self, player):§        return Minion(8, 8)§
class Secretkeeper(MinionCard):§    def __init__(self):§        super().__init__("Secretkeeper", 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)§§    def create_minion(self, player):§        return Minion(1, 2, effects=[Effect(SpellCast(IsSecret(), BothPlayer()), ActionTag(Give([Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]), SelfSelector()))])§
class SenseDemons(SpellCard):§    def __init__(self):§        super().__init__("Sense Demons", 3, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON)§§    def use(self, player, game):§        super().use(player, game)§§        for i in range(0, 2):§            demon_card = game.random_draw(game.current_player.deck.cards, lambda c: not c.drawn and c.is_minion() and c.minion_type == MINION_TYPE.DEMON)§            if demon_card:§                demon_card.drawn = True§                player.deck.left -= 1§                if len(player.hand) < 10:§                    player.hand.append(demon_card)§                    demon_card.player = player§                    self.trigger("card_drawn", demon_card)§                else:§                    player.trigger("card_destroyed", demon_card)§            else:§                if len(player.hand) < 10:§                    player.hand.append(hearthbreaker.cards.minions.warlock.WorthlessImp())§                    player.hand[-1].player = player§                    self.trigger("card_drawn", hearthbreaker.cards.minions.warlock.WorthlessImp())§
class Shadowflame(SpellCard):§    def __init__(self):§        super().__init__("Shadowflame", 4, CHARACTER_CLASS.WARLOCK, CARD_RARITY.RARE, target_func=hearthbreaker.targeting.find_friendly_minion_spell_target)§§    def use(self, player, game):§        super().use(player, game)§        shadowflame_damage = self.target.calculate_attack()§        self.target.die(self)§        for minion in game.other_player.minions:§            minion.damage(player.effective_spell_damage(shadowflame_damage), self)§
class Shadowform(SpellCard):§    def __init__(self):§        super().__init__("Shadowform", 3, CHARACTER_CLASS.PRIEST, CARD_RARITY.EPIC)§§    def use(self, player, game):§        super().use(player, game)§§        if type(player.hero.power) is not hearthbreaker.powers.MindShatter and type( player.hero.power) is not hearthbreaker.powers.MindSpike:§            player.hero.power = hearthbreaker.powers.MindSpike()§            player.hero.power.hero = player.hero§        elif type(player.hero.power) is hearthbreaker.powers.MindSpike:§            player.hero.power = hearthbreaker.powers.MindShatter()§            player.hero.power.hero = player.hero§
class Shadowstep(SpellCard):§    def __init__(self):§        super().__init__("Shadowstep", 0, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_friendly_minion_spell_target)§§    def use(self, player, game):§        super().use(player, game)§§        self.target.bounce()§        self.target.card.add_buff(Buff(ManaChange(-3)))§
class ShieldSlam(SpellCard):§    def __init__(self):§        super().__init__("Shield Slam", 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.find_minion_spell_target)§§    def use(self, player, game):§        super().use(player, game)§        self.target.damage(player.effective_spell_damage(player.hero.armor), self)§
class Shieldbearer(MinionCard):§    def __init__(self):§        super().__init__("Shieldbearer", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)§§    def create_minion(self, player):§        return Minion(0, 4, taunt=True)§
class Silence(SpellCard):§    def __init__(self):§        super().__init__("Silence", 0, CHARACTER_CLASS.PRIEST, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)§§    def use(self, player, game):§        super().use(player, game)§§        self.target.silence()§
class SilverHandKnight(MinionCard):§    def __init__(self):§        super().__init__("Silver Hand Knight", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Summon(Squire()), PlayerSelector()))§§    def create_minion(self, player):§        return Minion(4, 4)§
class SilvermoonGuardian(MinionCard):§    def __init__(self):§        super().__init__("Silvermoon Guardian", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)§§    def create_minion(self, player):§        return Minion(3, 3, divine_shield=True)§
class Snake(MinionCard):§    def __init__(self):§        super().__init__("Snake", 0, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.BEAST)§§    def create_minion(self, player):§        return Minion(1, 1)§
class SnakeTrap(SecretCard):§    def __init__(self):§        super().__init__("Snake Trap", 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.EPIC)§§    def activate(self, player):§        player.game.current_player.bind("character_attack", self._reveal)§§    def deactivate(self, player):§        player.game.current_player.unbind("character_attack", self._reveal)§§    def _reveal(self, attacker, target):§        if isinstance(target, Minion):§            snake = hearthbreaker.cards.minions.hunter.Snake()§            player = target.player.game.other_player§            for i in range(0, 3):§                snake.summon(player, player.game, len(player.minions))§            super().reveal()§
class Snipe(SecretCard):§    def __init__(self):§        super().__init__("Snipe", 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON)§§    def activate(self, player):§        player.game.current_player.bind("minion_played", self._reveal)§§    def deactivate(self, player):§        player.game.current_player.unbind("minion_played", self._reveal)§§    def _reveal(self, minion):§        minion.damage(4, None)§        super().reveal()§
class SorcerersApprentice(MinionCard):§    def __init__(self):§        super().__init__("Sorcerer's Apprentice", 2, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON)§§    def create_minion(self, player):§        return Minion(3, 2, auras=[Aura(ManaChange(-1), CardSelector(condition=IsSpell()))])§
class SoulOfTheForest(SpellCard):§    def __init__(self):§        super().__init__("Soul of the Forest", 4, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON)§§    def use(self, player, game):§        super().use(player, game)§        from hearthbreaker.cards.minions.druid import Treant§        for minion in player.minions:§            minion.deathrattle.append(Deathrattle(Summon(Treant()), PlayerSelector()))§
class SouthseaCaptain(MinionCard):§    def __init__(self):§        super().__init__("Southsea Captain", 3, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, minion_type=MINION_TYPE.PIRATE)§§    def create_minion(self, player):§        return Minion(3, 3, auras=[Aura(ChangeAttack(1), MinionSelector(IsType(MINION_TYPE.PIRATE))), Aura(ChangeHealth(1), MinionSelector(IsType(MINION_TYPE.PIRATE)))])§
class SouthseaDeckhand(MinionCard):§    def __init__(self):§        super().__init__("Southsea Deckhand", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.PIRATE)§§    def create_minion(self, player):§        return Minion(2, 1, buffs=[Buff(Charge(), GreaterThan(Count(WeaponSelector()), value=0))])§
class Spellbender(SecretCard):§    def __init__(self):§        super().__init__("Spellbender", 3, CHARACTER_CLASS.MAGE, CARD_RARITY.EPIC)§        self.player = None§§    def _reveal(self, card, index):§        if card.is_spell() and len(self.player.minions) < 7 and card.target and card.target.is_minion():§            SpellbenderMinion().summon(self.player, self.player.game, len(self.player.minions))§            card.target = self.player.minions[-1]§            super().reveal()§§    def activate(self, player):§        player.game.current_player.bind("card_played", self._reveal)§        self.player = player§§    def deactivate(self, player):§        player.game.current_player.unbind("card_played", self._reveal)§        self.player = None§
class SpiritWolf(MinionCard):§    def __init__(self):§        super().__init__("Spirit Wolf", 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.RARE, False)§§    def create_minion(self, p):§        return Minion(2, 3, taunt=True)§
class SpitefulSmith(MinionCard):§    def __init__(self):§        super().__init__("Spiteful Smith", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)§§    def create_minion(self, player):§        return Minion(4, 6, enrage=[Aura(ChangeAttack(2), WeaponSelector())])§
class Squire(MinionCard):§    def __init__(self):§        super().__init__("Squire", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False)§§    def create_minion(self, player):§        return Minion(2, 2)§
class Squirrel(MinionCard):§    def __init__(self):§        super().__init__("Squirrel", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.BEAST)§§    def create_minion(self, player):§        return Minion(1, 1)§
class StampedingKodo(MinionCard):§    def __init__(self):§        super().__init__("Stampeding Kodo", 5, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, minion_type=MINION_TYPE.BEAST, battlecry=Battlecry(Kill(), MinionSelector(AttackLessThanOrEqualTo(2), EnemyPlayer(), RandomPicker())))§§    def create_minion(self, player):§        return Minion(3, 5)§
class Starfall(SpellCard):§    def __init__(self):§        super().__init__("Starfall", 5, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE)§§    def can_use(self, player, game):§        return super().can_use(player, game) and len(game.other_player.minions) > 0§§    def use(self, player, game):§        super().use(player, game)§        option = player.agent.choose_option([DamageAll(), DamageOne()], player)§        option.use(player, game)§
class StormforgedAxe(WeaponCard):§    def __init__(self):§        super().__init__("Stormforged Axe", 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON, overload=1)§§    def create_weapon(self, player):§        return Weapon(2, 3)§
class StranglethornTiger(MinionCard):§    def __init__(self):§        super().__init__("Stranglethorn Tiger", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)§§    def create_minion(self, player):§        return Minion(5, 5, stealth=True)§
class Sunwalker(MinionCard):§    def __init__(self):§        super().__init__("Sunwalker", 6, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)§§    def create_minion(self, player):§        return Minion(4, 5, divine_shield=True, taunt=True)§
class SwordOfJustice(WeaponCard):§    def __init__(self):§        super().__init__("Sword of Justice", 3, CHARACTER_CLASS.PALADIN, CARD_RARITY.EPIC)§§    def create_weapon(self, player):§        return Weapon(1, 5, effects=[Effect(MinionSummoned(), ActionTag(Give([Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]), TargetSelector())), Effect(MinionSummoned(), ActionTag(DecreaseDurability(), WeaponSelector()))])§
class SylvanasWindrunner(MinionCard):§    def __init__(self):§        super().__init__("Sylvanas Windrunner", 6, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)§§    def create_minion(self, player):§        return Minion(5, 5, deathrattle=Deathrattle(Steal(), MinionSelector(players=EnemyPlayer(), picker=RandomPicker())))§
class TaurenWarrior(MinionCard):§    def __init__(self):§        super().__init__("Tauren Warrior", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)§§    def create_minion(self, player):§        return Minion(2, 3, taunt=True, enrage=[Aura(ChangeAttack(3), SelfSelector())])§
class TempleEnforcer(MinionCard):§    def __init__(self):§        super().__init__("Temple Enforcer", 6, CHARACTER_CLASS.PRIEST, CARD_RARITY.COMMON, battlecry=Battlecry(Give(ChangeHealth(3)), MinionSelector(picker=UserPicker())))§§    def create_minion(self, player):§        return Minion(6, 6)§
class TheBeast(MinionCard):§    def __init__(self):§        super().__init__("The Beast", 6, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.BEAST)§§    def create_minion(self, player):§        return Minion(9, 7, deathrattle=Deathrattle(Summon(FinkleEinhorn()), PlayerSelector(EnemyPlayer())))§
class TheBlackKnight(MinionCard):§    def __init__(self):§        super().__init__("The Black Knight", 6, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, battlecry=Battlecry(Kill(), MinionSelector(HasStatus("taunt"), EnemyPlayer(), UserPicker())))§§    def create_minion(self, player):§        return Minion(4, 5)§
class Thoughtsteal(SpellCard):§    def __init__(self):§        super().__init__("Thoughtsteal", 3, CHARACTER_CLASS.PRIEST, CARD_RARITY.COMMON)§§    def use(self, player, game):§        super().use(player, game)§        for i in range(0, 2):§            new_card = game.random_draw(game.other_player.deck.cards, lambda c: not c.drawn)§            if new_card:§                new_card = copy.copy(new_card)§                new_card.drawn = True§                if len(player.hand) < 10:§                    player.hand.append(new_card)§                    new_card.player = player§                    self.trigger("card_drawn", new_card)§                else:§                    player.trigger("card_destroyed", new_card)§
class TirionFordring(MinionCard):§    def __init__(self):§        super().__init__("Tirion Fordring", 8, CHARACTER_CLASS.PALADIN, CARD_RARITY.LEGENDARY)§§    def create_minion(self, player):§        return Minion(6, 6, divine_shield=True, taunt=True, deathrattle=Deathrattle(Equip(Ashbringer()), PlayerSelector()))§
class Treant(MinionCard):§    def __init__(self):§        super().__init__("Treant", 1, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON)§§    def create_minion(self, _):§        return Minion(2, 2)§
class Treant(MinionCard):§    def __init__(self):§        super().__init__("Treant", 1, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON)§§    def create_minion(self, _):§        return Minion(2, 2)§
class Treant(MinionCard):§    def __init__(self):§        super().__init__("Treant", 1, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON)§§    def create_minion(self, _):§        return Minion(2, 2)§
class TwilightDrake(MinionCard):§    def __init__(self):§        super().__init__("Twilight Drake", 4, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, minion_type=MINION_TYPE.DRAGON, battlecry=Battlecry(Give(Buff(ChangeHealth(Count(CardSelector())))), SelfSelector()))§§    def create_minion(self, player):§        return Minion(4, 1)§
class TwistingNether(SpellCard):§    def __init__(self):§        super().__init__("Twisting Nether", 8, CHARACTER_CLASS.WARLOCK, CARD_RARITY.EPIC)§§    def use(self, player, game):§        super().use(player, game)§        targets = copy.copy(game.other_player.minions)§        targets.extend(game.current_player.minions)§        for minion in targets:§            minion.die(self)§
class UnboundElemental(MinionCard):§    def __init__(self):§        super().__init__("Unbound Elemental", 3, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON)§§    def create_minion(self, player):§        return Minion(2, 4, effects=[Effect(CardPlayed(HasOverload()), ActionTag(Give(ChangeAttack(1)), SelfSelector())), Effect(CardPlayed(HasOverload()), ActionTag(Give(ChangeHealth(1)), SelfSelector()))])§
class UnleashTheHounds(SpellCard):§    def __init__(self):§        super().__init__("Unleash the Hounds", 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON)§§    def use(self, player, game):§        super().use(player, game)§§        for target in hearthbreaker.targeting.find_enemy_minion_spell_target(player.game, lambda x: True):§            hound = hearthbreaker.cards.minions.hunter.Hound()§            hound.summon(player, game, len(player.minions))§§    def can_use(self, player, game):§        return super().can_use(player, game) and len(game.other_player.minions) >= 1 and len(player.minions) < 7§
class VentureCoMercenary(MinionCard):§    def __init__(self):§        super().__init__("Venture Co. Mercenary", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)§§    def create_minion(self, player):§        return Minion(7, 6, auras=[Aura(ManaChange(3), CardSelector(condition=IsMinion()))])§
class VioletApprentice(MinionCard):§    def __init__(self):§        super().__init__("Violet Apprentice", 0, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False)§§    def create_minion(self, player):§        return Minion(1, 1)§
class VioletTeacher(MinionCard):§    def __init__(self):§        super().__init__("Violet Teacher", 4, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)§§    def create_minion(self, player):§        return Minion(3, 5, effects=[Effect(SpellCast(), ActionTag(Summon(VioletApprentice()), PlayerSelector()))])§
class VoidTerror(MinionCard):§    def __init__(self):§        super().__init__("Void Terror", 3, CHARACTER_CLASS.WARLOCK, CARD_RARITY.RARE, minion_type=MINION_TYPE.DEMON, battlecry=(Battlecry( Give([Buff(ChangeHealth(Attribute("health", MinionSelector(Adjacent())))), Buff(ChangeAttack(Attribute("attack", MinionSelector(Adjacent()))))]), SelfSelector()), Battlecry(Kill(), MinionSelector(Adjacent()))))§§    def create_minion(self, player):§        return Minion(3, 3)§
class Whelp(MinionCard):§    def __init__(self):§        super().__init__("Whelp", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.DRAGON)§§    def create_minion(self, player):§        return Minion(1, 1)§
class Whelp(MinionCard):§    def __init__(self):§        super().__init__("Whelp", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.DRAGON)§§    def create_minion(self, player):§        return Minion(1, 1)§
class WildPyromancer(MinionCard):§    def __init__(self):§        super().__init__("Wild Pyromancer", 2, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)§§    def create_minion(self, player):§        return Minion(3, 2, effects=[Effect(CardUsed(IsSpell()), ActionTag(Damage(1), MinionSelector(condition=None, players=BothPlayer())))])§
class WindfuryHarpy(MinionCard):§    def __init__(self):§        super().__init__("Windfury Harpy", 6, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)§§    def create_minion(self, player):§        return Minion(4, 5, windfury=True)§
class WorthlessImp(MinionCard):§    def __init__(self):§        super().__init__("Worthless Imp", 1, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, False, MINION_TYPE.DEMON)§§    def create_minion(self, p):§        return Minion(1, 1)§
class Wrath(SpellCard):§    def __init__(self):§        super().__init__("Wrath", 2, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)§§    def use(self, player, game):§        class WrathOne(ChoiceCard):§            def __init__(self):§                super().__init__("Wrath 1 Damage", 0, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.find_minion_spell_target)§§            def use(self, player, game):§                target.damage(player.effective_spell_damage(1), wrath)§                player.draw()§§        class WrathThree(ChoiceCard):§            def __init__(self):§                super().__init__("Wrath 3 Damage", 0, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.find_minion_spell_target)§§            def use(self, player, game):§                target.damage(player.effective_spell_damage(3), wrath)§§        super().use(player, game)§        option = game.current_player.agent.choose_option([WrathOne(), WrathThree()], player)§        target = self.target§        wrath = self§        option.use(player, game)§
class YoungDragonhawk(MinionCard):§    def __init__(self):§        super().__init__("Young Dragonhawk", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)§§    def create_minion(self, player):§        return Minion(1, 1, windfury=True)§
class YoungPriestess(MinionCard):§    def __init__(self):§        super().__init__("Young Priestess", 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)§§    def create_minion(self, player):§        return Minion(2, 1, effects=[Effect(TurnEnded(), ActionTag(Give(ChangeHealth(1)), MinionSelector(picker=RandomPicker())))])§
class YouthfulBrewmaster(MinionCard):§    def __init__(self):§        super().__init__("Youthful Brewmaster", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Bounce(), MinionSelector(picker=UserPicker())))§§    def create_minion(self, player):§        return Minion(3, 2)§
class Ysera(MinionCard):§    def __init__(self):§        super().__init__("Ysera", 9, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DRAGON)§§    def create_minion(self, player):§        dream_card_list = [EmeraldDrake(), LaughingSister(), Nightmare(), YseraAwakens(), Dream()]§        return Minion(4, 12, effects=[Effect(TurnEnded(), ActionTag(AddCard(CardQuery(source=CARD_SOURCE.LIST, source_list=dream_card_list)), PlayerSelector()))])§
class YseraAwakens(SpellCard):§    def __init__(self):§        super().__init__("Ysera Awakens", 2, CHARACTER_CLASS.DREAM, CARD_RARITY.COMMON, False)§§    def use(self, player, game):§        super().use(player, game)§        targets = copy.copy(player.game.other_player.minions)§        targets.extend(player.game.current_player.minions)§        targets.append(player.game.other_player.hero)§        targets.append(player.game.current_player.hero)§        targets = filter(lambda m: not m.is_minion() or m.card.name != "Ysera", targets)§        for minion in targets:§            minion.damage(player.effective_spell_damage(5), self)§
class AxeFlinger(MinionCard):§    def __init__(self):§        super().__init__("Axe Flinger", 4, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON)§§    def create_minion(self, player):§        return Minion(2, 5, effects=[Effect(Damaged(), ActionTag(Damage(2), HeroSelector(EnemyPlayer())))])§
class BlackwingTechnician(MinionCard):§    def __init__(self):§        super().__init__("Blackwing Technician", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=(Battlecry(Give([Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]), SelfSelector(), GreaterThan(Count(CardSelector(condition=IsType(MINION_TYPE.DRAGON))), value=0))))§§    def create_minion(self, player):§        return Minion(2, 4)§
class Chromaggus(MinionCard):§    def __init__(self):§        super().__init__("Chromaggus", 8, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DRAGON)§§    def create_minion(self, player):§        return Minion(6, 8, effects=[Effect(CardDrawn(), [ActionTag(AddCard(CardQuery(source=CARD_SOURCE.LAST_DRAWN, make_copy=True)), PlayerSelector())])])§
class CoreRager(MinionCard):§    def __init__(self):§        super().__init__("Core Rager", 4, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE, minion_type=MINION_TYPE.BEAST, battlecry=(Battlecry(Give([Buff(ChangeAttack(3)), Buff(ChangeHealth(3))]), SelfSelector(), Not(GreaterThan(Count(CardSelector()), value=0)))))§§    def create_minion(self, player):§        return Minion(4, 4)§
class DarkIronSkulker(MinionCard):§    def __init__(self):§        super().__init__("Dark Iron Skulker", 5, CHARACTER_CLASS.ROGUE, CARD_RARITY.RARE, battlecry=Battlecry(Damage(2), MinionSelector(condition=Not(IsDamaged()), players=EnemyPlayer())))§§    def create_minion(self, player):§        return Minion(4, 3)§
class Demonwrath(SpellCard):§    def __init__(self):§        super().__init__("Demonwrath", 3, CHARACTER_CLASS.WARLOCK, CARD_RARITY.RARE)§§    def use(self, player, game):§        super().use(player, game)§        targets = copy.copy(game.other_player.minions)§        targets.extend(game.current_player.minions)§        for minion in targets:§            if minion.card.minion_type is not MINION_TYPE.DEMON:§                minion.damage(player.effective_spell_damage(2), self)§
class DragonConsort(MinionCard):§    def __init__(self):§        super().__init__("Dragon Consort", 5, CHARACTER_CLASS.PALADIN, CARD_RARITY.RARE, minion_type=MINION_TYPE.DRAGON, battlecry=Battlecry(GiveAura([AuraUntil(ManaChange(-3), CardSelector(condition=IsType(MINION_TYPE.DRAGON)), CardPlayed(IsType(MINION_TYPE.DRAGON)), False)]), PlayerSelector()))§§    def create_minion(self, player):§        return Minion(5, 5)§
class DragonEgg(MinionCard):§    def __init__(self):§        super().__init__("Dragon Egg", 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)§§    def create_minion(self, player):§        return Minion(0, 2, effects=[Effect(Damaged(), ActionTag(Summon(BlackWhelp()), PlayerSelector()))])§
class DragonsBreath(SpellCard):§    def __init__(self):§        super().__init__("Dragon's Breath", 5, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_spell_target, buffs=[Buff(ManaChange(Count(DeadMinionSelector(players=BothPlayer())), -1))])§§    def use(self, player, game):§        super().use(player, game)§        self.target.damage(player.effective_spell_damage(4), self)§
class DruidOfTheFlame(MinionCard):§    def __init__(self):§        super().__init__("Druid of the Flame", 3, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, choices=[§            Choice(FlameCatForm(), Transform(FlameCat()), SelfSelector()),§            Choice(FlameBirdForm(), Transform(FlameBird()), SelfSelector())§        ])§§    def create_minion(self, player):§        return Minion(2, 2)§
class DruidOfTheFlame(MinionCard):§    def __init__(self):§        super().__init__("Druid of the Flame", 3, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, choices=[§            Choice(FlameCatForm(), Transform(FlameCat()), SelfSelector()),§            Choice(FlameBirdForm(), Transform(FlameBird()), SelfSelector())§        ])§§    def create_minion(self, player):§        return Minion(2, 2)§
class DruidOfTheFlame(MinionCard):§    def __init__(self):§        super().__init__("Druid of the Flame", 3, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, choices=[§            Choice(FlameCatForm(), Transform(FlameCat()), SelfSelector()),§            Choice(FlameBirdForm(), Transform(FlameBird()), SelfSelector())§        ])§§    def create_minion(self, player):§        return Minion(2, 2)§
class EmperorThaurissan(MinionCard):§    def __init__(self):§        super().__init__("Emperor Thaurissan", 6, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)§§    def create_minion(self, player):§        return Minion(5, 5, effects=[Effect(TurnEnded(), [ActionTag(Give(Buff(ManaChange(-1))), CardSelector())])])§
class FireguardDestroyer(MinionCard):§    def __init__(self):§        super().__init__("Fireguard Destroyer", 4, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON, overload=1, battlecry=Battlecry(Give(Buff(ChangeAttack(RandomAmount(1, 4)))), SelfSelector()))§§    def create_minion(self, player):§        return Minion(3, 6)§
class Flamewaker(MinionCard):§    def __init__(self):§        super().__init__("Flamewaker", 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)§§    def create_minion(self, player):§        return Minion(2, 4, effects=[Effect(CardUsed(IsSpell()), ActionTag(Damage(1), CharacterSelector(None, EnemyPlayer(), RandomPicker(2))))])§
class GangUp(SpellCard):§    def __init__(self):§        super().__init__("Gang Up", 2, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)§§    def use(self, player, game):§        super().use(player, game)§        for i in range(3):§            player.put_back(type(self.target.card)())§
class GrimPatron(MinionCard):§    def __init__(self):§        super().__init__("Grim Patron", 5, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)§§    def create_minion(self, player):§        return Minion(3, 3, effects=[Effect(Damaged(), [ActionTag(Summon(GrimPatron()), PlayerSelector(), GreaterThan(Attribute("health", SelfSelector()), value=0))])])§
class ImpGangBoss(MinionCard):§    def __init__(self):§        super().__init__("Imp Gang Boss", 3, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, minion_type=MINION_TYPE.DEMON)§§    def create_minion(self, player):§        return Minion(2, 4, effects=[Effect(Damaged(), ActionTag(Summon(Imp()), PlayerSelector()))])§
class LavaShock(SpellCard):§    def __init__(self):§        super().__init__("Lava Shock", 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.RARE, target_func=hearthbreaker.targeting.find_spell_target)§§    def use(self, player, game):§        super().use(player, game)§        self.target.damage(2, self)§        player.upcoming_overload = 0§        player.mana += player.current_overload§        player.current_overload = 0§
class MajordomoExecutus(MinionCard):§    def __init__(self):§        super().__init__("Majordomo Executus", 9, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)§§    def create_minion(self, player):§        return Minion(9, 7, deathrattle=[Deathrattle(Transform(Ragnaros()), HeroSelector())])§
class Nefarian(MinionCard):§    def __init__(self):§        super().__init__("Nefarian", 9, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DRAGON, battlecry=Battlecry(AddCard(CardQuery(conditions=[ IsClass(Attribute("character_class", HeroSelector(EnemyPlayer()))), IsSpell() ]), 2), PlayerSelector()))§§    def create_minion(self, player):§        return Minion(8, 8)§
class QuickShot(SpellCard):§    def __init__(self):§        super().__init__("Quick Shot", 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_spell_target)§§    def use(self, player, game):§        super().use(player, game)§        self.target.damage(3, self)§        if len(player.hand) == 0:§            player.draw()§
class RendBlackhand(MinionCard):§    def __init__(self):§        super().__init__("Rend Blackhand", 7, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, battlecry=(Battlecry(Kill(), MinionSelector(And(MinionIsNotTarget(), IsRarity(CARD_RARITY.LEGENDARY)), BothPlayer(), UserPicker()), GreaterThan(Count(CardSelector(condition=IsType(MINION_TYPE.DRAGON))), value=0))))§§    def create_minion(self, player):§        return Minion(8, 4)§
class Resurrect(SpellCard):§    def __init__(self):§        super().__init__("Resurrect", 2, CHARACTER_CLASS.PRIEST, CARD_RARITY.RARE)§§    def use(self, player, game):§        from hearthbreaker.engine import card_lookup§        super().use(player, game)§        if len(player.graveyard) > 0 and len(player.minions) < 7:§            card_name = game.random_choice(player.graveyard)§            card = card_lookup(card_name)§            card.summon(player, game, len(player.minions))§
class Revenge(SpellCard):§    def __init__(self):§        super().__init__("Revenge", 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.RARE)§§    def use(self, player, game):§        super().use(player, game)§        targets = copy.copy(game.other_player.minions)§        targets.extend(game.current_player.minions)§        if player.hero.health <= 12:§            for minion in targets:§                minion.damage(player.effective_spell_damage(3), self)§        else:§            for minion in targets:§                minion.damage(player.effective_spell_damage(1), self)§
class VolcanicDrake(MinionCard):§    def __init__(self):§        super().__init__("Volcanic Drake", 6, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, buffs=[Buff(ManaChange(Count(DeadMinionSelector(players=BothPlayer())), -1))])§§    def create_minion(self, player):§        return Minion(6, 4)§
class VolcanicLumberer(MinionCard):§    def __init__(self):§        super().__init__("Volcanic Lumberer", 9, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE, buffs=[Buff(ManaChange(Count(DeadMinionSelector(players=BothPlayer())), -1))])§§    def create_minion(self, player):§        return Minion(7, 8, taunt=True)§
class Whelp(MinionCard):§    def __init__(self):§        super().__init__("Whelp", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.DRAGON)§§    def create_minion(self, player):§        return Minion(1, 1)§
class Whelp(MinionCard):§    def __init__(self):§        super().__init__("Whelp", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.DRAGON)§§    def create_minion(self, player):§        return Minion(1, 1)§
class Whelp(MinionCard):§    def __init__(self):§        super().__init__("Whelp", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.DRAGON)§§    def create_minion(self, player):§        return Minion(1, 1)§
