class AssassinsBlade(WeaponCard):§    def __init__(self):§        super().__init__("Assassin's Blade", 5, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON)§§    def create_weapon(self, player):§        return Weapon(3, 4)§
class BoulderfistOgre(MinionCard):§    def __init__(self):§        super().__init__("Boulderfist Ogre", 6, CHARACTER_CLASS.ALL, CARD_RARITY.FREE)§§    def create_minion(self, player):§        return Minion(6, 7)§
class DeadlyPoison(SpellCard):§    def __init__(self):§        super().__init__("Deadly Poison", 1, CHARACTER_CLASS.ROGUE, CARD_RARITY.FREE)§§    def use(self, player, game):§        super().use(player, game)§§        player.weapon.base_attack += 2§        player.hero.change_temp_attack(2)§§    def can_use(self, player, game):§        return super().can_use(player, game) and player.weapon is not None§
class FireElemental(MinionCard):§    def __init__(self):§        super().__init__("Fire Elemental", 6, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON, battlecry=Battlecry(Damage(3), CharacterSelector(players=BothPlayer(), picker=UserPicker())))§§    def create_minion(self, player):§        return Minion(6, 5)§
class GnomishInventor(MinionCard):§    def __init__(self):§        super().__init__("Gnomish Inventor", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Draw(), PlayerSelector()))§§    def create_minion(self, player):§        return Minion(2, 4)§
class HeroicStrike(SpellCard):§    def __init__(self):§        super().__init__("Heroic Strike", 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.FREE)§§    def use(self, player, game):§        super().use(player, game)§        player.hero.change_temp_attack(4)§
class IronbarkProtector(MinionCard):§    def __init__(self):§        super().__init__("Ironbark Protector", 8, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON)§§    def create_minion(self, player):§        return Minion(8, 8, taunt=True)§
class MarkOfTheWild(SpellCard):§    def __init__(self):§        super().__init__("Mark of the Wild", 2, CHARACTER_CLASS.DRUID, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)§§    def use(self, player, game):§        super().use(player, game)§        self.target.change_attack(2)§        self.target.increase_health(2)§        self.target.taunt = True§
class MultiShot(SpellCard):§    def __init__(self):§        super().__init__("Multi-Shot", 4, CHARACTER_CLASS.HUNTER, CARD_RARITY.FREE)§§    def use(self, player, game):§        super().use(player, game)§§        targets = copy.copy(game.other_player.minions)§        for i in range(0, 2):§            target = game.random_choice(targets)§            targets.remove(target)§            target.damage(player.effective_spell_damage(3), self)§§    def can_use(self, player, game):§        return super().can_use(player, game) and len(game.other_player.minions) >= 2§
class PowerWordShield(SpellCard):§    def __init__(self):§        super().__init__("Power Word: Shield", 1, CHARACTER_CLASS.PRIEST, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)§§    def use(self, player, game):§        super().use(player, game)§§        self.target.increase_health(2)§        player.draw()§
class SenjinShieldmasta(MinionCard):§    def __init__(self):§        super().__init__("Sen'jin Shieldmasta", 4, CHARACTER_CLASS.ALL, CARD_RARITY.FREE)§§    def create_minion(self, player):§        return Minion(3, 5, taunt=True)§
class SinisterStrike(SpellCard):§    def __init__(self):§        super().__init__("Sinister Strike", 1, CHARACTER_CLASS.ROGUE, CARD_RARITY.FREE)§§    def use(self, player, game):§        super().use(player, game)§§        game.other_player.hero.damage(player.effective_spell_damage(3), self)§
class Succubus(MinionCard):§    def __init__(self):§        super().__init__("Succubus", 2, CHARACTER_CLASS.WARLOCK, CARD_RARITY.FREE, minion_type=MINION_TYPE.DEMON, battlecry=Battlecry(Discard(), PlayerSelector()))§§    def create_minion(self, player):§        return Minion(4, 3)§
class WarGolem(MinionCard):§    def __init__(self):§        super().__init__("War Golem", 7, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)§§    def create_minion(self, player):§        return Minion(7, 7)§
class Acidmaw(MinionCard):§    def __init__(self):§        super().__init__("Acidmaw", 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.BEAST)§§    def create_minion(self, player):§        return Minion(4, 2, effects=[Effect(CharacterDamaged(MinionIsNotTarget(), BothPlayer()), [ActionTag(Kill(), TargetSelector())])])§
class Boar(MinionCard):§    def __init__(self):§        super().__init__("Boar", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.BEAST)§§    def create_minion(self, player):§        return Minion(1, 1)§
class AnodizedRoboCub(MinionCard):§    def __init__(self):§        super().__init__("Anodized Robo Cub", 2, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, choices=[Choice(AttackMode(), Give([Buff(ChangeAttack(1))]), SelfSelector()), Choice(TankMode(), Give([Buff(ChangeHealth(1))]), SelfSelector())])§§    def create_minion(self, player):§        return Minion(2, 2, taunt=True)§
class BurrowingMine(SpellCard):§    def __init__(self):§        super().__init__("Burrowing Mine", 0, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON, False, effects=[Effect(Drawn(), ActionTag(Damage(10), HeroSelector())), Effect(Drawn(), ActionTag(Discard(query=CardQuery(source=CARD_SOURCE.LAST_DRAWN)), PlayerSelector())), Effect(Drawn(), ActionTag(Draw(), PlayerSelector()))])§§    def use(self, player, game):§        super().use(player, game)§
class Crackle(SpellCard):§    def __init__(self):§        super().__init__("Crackle", 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_spell_target, overload=1)§§    def use(self, player, game):§        super().use(player, game)§§        self.target.damage(player.effective_spell_damage(game.random_amount(3, 6)), self)§
class EmergencyCoolant(SpellCard):§    def __init__(self):§        super().__init__("Emergency Coolant", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.find_minion_spell_target)§§    def use(self, player, game):§        super().use(player, game)§        self.target.add_buff(Buff(Frozen()))§
class FlyingMachine(MinionCard):§    def __init__(self):§        super().__init__("Flying Machine", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)§§    def create_minion(self, player):§        return Minion(1, 4, windfury=True)§
class GoblinAutoBarber(MinionCard):§    def __init__(self):§        super().__init__("Goblin Auto-Barber", 2, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, battlecry=Battlecry(IncreaseWeaponAttack(1), WeaponSelector()))§§    def create_minion(self, player):§        return Minion(3, 2)§
class IronSensei(MinionCard):§    def __init__(self):§        super().__init__("Iron Sensei", 3, CHARACTER_CLASS.ROGUE, CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)§§    def create_minion(self, player):§        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Give([Buff(ChangeAttack(2)), Buff(ChangeHealth(2))]), MinionSelector(IsType(MINION_TYPE.MECH), picker=RandomPicker())))])§
class MalGanis(MinionCard):§    def __init__(self):§        super().__init__("Mal'Ganis", 9, CHARACTER_CLASS.WARLOCK, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DEMON)§§    def create_minion(self, player):§        return Minion(9, 7, auras=[Aura(ChangeHealth(2), MinionSelector(IsType(MINION_TYPE.DEMON))), Aura(ChangeAttack(2), MinionSelector(IsType(MINION_TYPE.DEMON))), Aura(Immune(), HeroSelector())])§
class MistressOfPain(MinionCard):§    def __init__(self):§        super().__init__("Mistress of Pain", 2, CHARACTER_CLASS.WARLOCK, CARD_RARITY.RARE, minion_type=MINION_TYPE.DEMON)§§    def create_minion(self, player):§        return Minion(1, 4, effects=[Effect(DidDamage(), ActionTag(Heal(EventValue()), HeroSelector()))])§
class Powermace(WeaponCard):§    def __init__(self):§        super().__init__("Powermace", 3, CHARACTER_CLASS.SHAMAN, CARD_RARITY.RARE)§§    def create_weapon(self, player):§        return Weapon(3, 2, deathrattle=Deathrattle(Give([Buff(ChangeHealth(2)), Buff(ChangeAttack(2))]), MinionSelector(IsType(MINION_TYPE.MECH), picker=RandomPicker())))§
class ScrewjankClunker(MinionCard):§    def __init__(self):§        super().__init__("Screwjank Clunker", 4, CHARACTER_CLASS.WARRIOR, CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=Battlecry(Give([Buff(ChangeHealth(2)), Buff(ChangeAttack(2))]), MinionSelector(IsType(MINION_TYPE.MECH), picker=UserPicker())))§§    def create_minion(self, player):§        return Minion(2, 5)§
class SneedsOldShredder(MinionCard):§    def __init__(self):§        super().__init__("Sneed's Old Shredder", 8, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)§§    def create_minion(self, player):§        return Minion(5, 7, deathrattle=Deathrattle(Summon(CardQuery(conditions=[IsRarity(CARD_RARITY.LEGENDARY), IsMinion()])), PlayerSelector()))§
class Toshley(MinionCard):§    def __init__(self):§        from hearthbreaker.cards.spells.neutral import spare_part_list§        super().__init__("Toshley", 6, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, battlecry=Battlecry(AddCard(CardQuery(source=CARD_SOURCE.LIST, source_list=spare_part_list)), PlayerSelector()))§§    def create_minion(self, player):§        from hearthbreaker.cards.spells.neutral import spare_part_list§        return Minion(5, 7, deathrattle=Deathrattle(AddCard(CardQuery(source=CARD_SOURCE.LIST, source_list=spare_part_list)), PlayerSelector()))§
class Warbot(MinionCard):§    def __init__(self):§        super().__init__("Warbot", 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)§§    def create_minion(self, player):§        return Minion(1, 3, enrage=[Aura(ChangeAttack(1), SelfSelector())])§
class Deathlord(MinionCard):§    def __init__(self):§        super().__init__("Deathlord", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)§§    def create_minion(self, player):§        return Minion(2, 8, taunt=True, deathrattle=Deathrattle(Summon(CardQuery(conditions=[IsMinion()], source=CARD_SOURCE.MY_DECK)), PlayerSelector(EnemyPlayer())))§
class NerubarWeblord(MinionCard):§    def __init__(self):§        super().__init__("Nerub'ar Weblord", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)§§    def create_minion(self, player):§        return Minion(1, 4, auras=[Aura(ManaChange(2), CardSelector(BothPlayer(), HasBattlecry()))])§
class SpectralKnight(MinionCard):§    def __init__(self):§        super().__init__("Spectral Knight", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)§§    def create_minion(self, player):§        return Minion(4, 6, spell_targetable=False)§
class WailingSoul(MinionCard):§    def __init__(self):§        super().__init__("Wailing Soul", 4, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, battlecry=Battlecry(Silence(), MinionSelector()))§§    def create_minion(self, player):§        return Minion(3, 5)§
class AmaniBerserker(MinionCard):§    def __init__(self):§        super().__init__("Amani Berserker", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)§§    def create_minion(self, player):§        return Minion(2, 3, enrage=[Aura(ChangeAttack(3), SelfSelector())])§
class ArchmageAntonidas(MinionCard):§    def __init__(self):§        super().__init__("Archmage Antonidas", 7, CHARACTER_CLASS.MAGE, CARD_RARITY.LEGENDARY)§§    def create_minion(self, player):§        return Minion(5, 7, effects=[Effect(SpellCast(), ActionTag(AddCard(hearthbreaker.cards.Fireball()), PlayerSelector()))])§
class Bananas(SpellCard):§    def __init__(self):§        super().__init__("Bananas", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, hearthbreaker.targeting.find_minion_spell_target)§§    def use(self, player, game):§        super().use(player, game)§        self.target.change_attack(1)§        self.target.increase_health(1)§
class BlessedChampion(SpellCard):§    def __init__(self):§        super().__init__("Blessed Champion", 5, CHARACTER_CLASS.PALADIN, CARD_RARITY.RARE, target_func=hearthbreaker.targeting.find_minion_spell_target)§§    def use(self, player, game):§        super().use(player, game)§        self.target.add_buff(Buff(DoubleAttack()))§
class CabalShadowPriest(MinionCard):§    def __init__(self):§        super().__init__("Cabal Shadow Priest", 6, CHARACTER_CLASS.PRIEST, CARD_RARITY.EPIC, battlecry=Battlecry(Steal(), MinionSelector(AttackLessThanOrEqualTo(2), players=EnemyPlayer(), picker=UserPicker())))§§    def create_minion(self, player):§        return Minion(4, 5)§
class ConeOfCold(SpellCard):§    def __init__(self):§        super().__init__("Cone of Cold", 4, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)§§    def use(self, player, game):§        super().use(player, game)§§        self.target.add_buff(Buff(Frozen()))§        index = self.target.index§§        if self.target.index < len(self.target.player.minions) - 1:§            minion = self.target.player.minions[index + 1]§            minion.damage(player.effective_spell_damage(1), self)§            minion.add_buff(Buff(Frozen()))§§        self.target.damage(player.effective_spell_damage(1), self)§§        if self.target.index > 0:§            minion = self.target.player.minions[index - 1]§            minion.damage(player.effective_spell_damage(1), self)§            minion.add_buff(Buff(Frozen()))§
class DefenderOfArgus(MinionCard):§    def __init__(self):§        super().__init__("Defender of Argus", 4, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, battlecry=Battlecry(Give([ Buff(Taunt()), Buff(ChangeAttack(1)), Buff(ChangeHealth(1)) ]), MinionSelector(Adjacent())))§§    def create_minion(self, player):§        return Minion(2, 3)§
class Doomhammer(WeaponCard):§    def __init__(self):§        super().__init__("Doomhammer", 5, CHARACTER_CLASS.SHAMAN, CARD_RARITY.EPIC, overload=2)§§    def create_weapon(self, player):§        return Weapon(2, 8, buffs=[Buff(Windfury())])§
class EarthShock(SpellCard):§    def __init__(self):§        super().__init__("Earth Shock", 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)§§    def use(self, player, game):§        super().use(player, game)§§        self.target.silence()§        self.target.damage(player.effective_spell_damage(1), self)§
class EyeForAnEye(SecretCard):§    def __init__(self):§        super().__init__("Eye for an Eye", 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON)§§    def _reveal(self, character, attacker, amount):§        if character.is_hero():§            character.player.opponent.hero.damage(amount, self)§        super().reveal()§§    def activate(self, player):§        player.bind("character_damaged", self._reveal)§§    def deactivate(self, player):§        player.unbind("character_damaged", self._reveal)§
class Flare(SpellCard):§    def __init__(self):§        super().__init__("Flare", 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)§§    def use(self, player, game):§        super().use(player, game)§        for minion in hearthbreaker.targeting.find_minion_spell_target(game, lambda m: m.stealth):§            minion.stealth = False§§        for secret in game.other_player.secrets:§            secret.deactivate(game.other_player)§§        game.other_player.secrets = []§        player.draw()§
class Gorehowl(WeaponCard):§    def __init__(self):§        super().__init__("Gorehowl", 7, CHARACTER_CLASS.WARRIOR, CARD_RARITY.EPIC)§§    def create_weapon(self, player):§        return Weapon(7, 1, effects=[Effect(CharacterAttack(And(IsHero(), TargetIsMinion())), [ActionTag(IncreaseDurability(), WeaponSelector()), ActionTag(IncreaseWeaponAttack(-1), WeaponSelector()), ActionTag(Give(BuffUntil(ChangeAttack(1), AttackCompleted())), HeroSelector())])])§
class Hound(MinionCard):§    def __init__(self):§        super().__init__("Hound", 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.BEAST)§§    def create_minion(self, player):§        return Minion(1, 1, charge=True)§
class InjuredBlademaster(MinionCard):§    def __init__(self):§        super().__init__("Injured Blademaster", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, battlecry=Battlecry(Damage(4), SelfSelector()))§§    def create_minion(self, player):§        return Minion(4, 7)§
class KnifeJuggler(MinionCard):§    def __init__(self):§        super().__init__("Knife Juggler", 2, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)§§    def create_minion(self, player):§        return Minion(3, 2, effects=[Effect(AfterAdded(), ActionTag(Damage(1), CharacterSelector(players=EnemyPlayer(), picker=RandomPicker(), condition=None)))])§
class Lightwell(MinionCard):§    def __init__(self):§        super().__init__("Lightwell", 2, CHARACTER_CLASS.PRIEST, CARD_RARITY.RARE)§§    def create_minion(self, player):§        return Minion(0, 5, effects=[Effect(TurnStarted(), ActionTag(Heal(3), CharacterSelector(condition=IsDamaged(), picker=RandomPicker())))])§
class ManaWyrm(MinionCard):§    def __init__(self):§        super().__init__("Mana Wyrm", 1, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON)§§    def create_minion(self, player):§        return Minion(1, 3, effects=[Effect(SpellCast(), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])§
class MogushanWarden(MinionCard):§    def __init__(self):§        super().__init__("Mogu'shan Warden", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)§§    def create_minion(self, player):§        return Minion(1, 7, taunt=True)§
class Nourish(SpellCard):§    def __init__(self):§        super().__init__("Nourish", 5, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE)§§    def use(self, player, game):§        super().use(player, game)§§        class Gain2(ChoiceCard):§§            def __init__(self):§                super().__init__("Gain 2 mana crystals", 0, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, False)§§            def use(self, player, game):§                if player.max_mana < 8:§                    player.max_mana += 2§                    player.mana += 2§                else:§                    player.max_mana = 10§                    player.mana += 2§§        class Draw3(ChoiceCard):§§            def __init__(self):§                super().__init__("Draw three cards", 0, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, False)§§            def use(self, player, game):§                player.draw()§                player.draw()§                player.draw()§§        option = player.agent.choose_option([Gain2(), Draw3()], player)§        option.use(player, game)§
class Preparation(SpellCard):§    def __init__(self):§        super().__init__("Preparation", 0, CHARACTER_CLASS.ROGUE, CARD_RARITY.EPIC)§§    def use(self, player, game):§        super().use(player, game)§        player.add_aura(AuraUntil(ManaChange(-3), CardSelector(condition=IsSpell()), SpellCast()))§
class Repentance(SecretCard):§    def __init__(self):§        super().__init__("Repentance", 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON)§§    def _reveal(self, minion):§§        minion.set_health_to(1)§        super().reveal()§§    def activate(self, player):§        player.game.current_player.bind("minion_played", self._reveal)§§    def deactivate(self, player):§        player.game.current_player.unbind("minion_played", self._reveal)§
class ShadowOfNothing(MinionCard):§    def __init__(self):§        super().__init__("Shadow of Nothing", 0, CHARACTER_CLASS.PRIEST, CARD_RARITY.EPIC, False)§§    def create_minion(self, p):§        return Minion(0, 1)§
class Slam(SpellCard):§    def __init__(self):§        super().__init__("Slam", 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)§§    def use(self, player, game):§        super().use(player, game)§        if self.target.health > player.effective_spell_damage(2) or self.target.divine_shield:§            self.target.damage(player.effective_spell_damage(2), self)§            player.draw()§        else:§            self.target.damage(player.effective_spell_damage(2), self)§
class Spellbreaker(MinionCard):§    def __init__(self):§        super().__init__("Spellbreaker", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.NONE, battlecry=Battlecry(Silence(), MinionSelector(players=BothPlayer(), picker=UserPicker())))§§    def create_minion(self, player):§        return Minion(4, 3)§
class SunfuryProtector(MinionCard):§    def __init__(self):§        super().__init__("Sunfury Protector", 2, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, battlecry=Battlecry(Give(Buff(Taunt())), MinionSelector(Adjacent())))§§    def create_minion(self, player):§        return Minion(2, 3)§
class TinkmasterOverspark(MinionCard):§    def __init__(self):§        super().__init__("Tinkmaster Overspark", 3, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, battlecry=Battlecry(Transform(CardQuery(source=CARD_SOURCE.LIST, source_list=[Devilsaur(), Squirrel()])), MinionSelector(players=BothPlayer(), picker=RandomPicker())))§§    def create_minion(self, player):§        return Minion(3, 3)§
class Vaporize(SecretCard):§    def __init__(self):§        super().__init__("Vaporize", 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)§§    def _reveal(self, attacker, target):§        if target is self.player.hero and attacker.is_minion() and not attacker.removed:§            attacker.die(self)§            attacker.game.check_delayed()§            super().reveal()§§    def activate(self, player):§        player.opponent.bind("character_attack", self._reveal)§§    def deactivate(self, player):§        player.opponent.unbind("character_attack", self._reveal)§
class WorgenInfiltrator(MinionCard):§    def __init__(self):§        super().__init__("Worgen Infiltrator", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)§§    def create_minion(self, player):§        return Minion(2, 1, stealth=True)§
class BlackwingCorruptor(MinionCard):§    def __init__(self):§        super().__init__("Blackwing Corruptor", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Damage(3), CharacterSelector(players=BothPlayer(), picker=UserPicker()), GreaterThan(Count(CardSelector(condition=IsType(MINION_TYPE.DRAGON))), value=0)))§§    def create_minion(self, player):§        return Minion(5, 4)§
class DrakonidCrusher(MinionCard):§    def __init__(self):§        super().__init__("Drakonid Crusher", 6, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=(Battlecry(Give([Buff(ChangeAttack(3)), Buff(ChangeHealth(3))]), SelfSelector(), Not(GreaterThan(Attribute('health', HeroSelector(EnemyPlayer())), value=15)))))§§    def create_minion(self, player):§        return Minion(6, 6)§
class Imp(MinionCard):§    def __init__(self):§        super().__init__("Imp", 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, False, minion_type=MINION_TYPE.DEMON)§§    def create_minion(self, player):§        return Minion(1, 1)§
class TwilightWhelp(MinionCard):§    def __init__(self):§        super().__init__("Twilight Whelp", 1, CHARACTER_CLASS.PRIEST, CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=(Battlecry(Give(Buff(ChangeHealth(2))), SelfSelector(), GreaterThan(Count(CardSelector(condition=IsType(MINION_TYPE.DRAGON))), value=0))))§§    def create_minion(self, player):§        return Minion(2, 1)§
